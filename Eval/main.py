import torch
import warnings
import argparse
import numpy as np
import pandas as pd
from tqdm import tqdm
from scipy import optimize
from scipy import stats
from sympy import symbols, diff, expand
from numpy.linalg import norm
from scipy.sparse import spdiags
from torch import nn, optim
from  scipy.stats import ttest_ind, levene
import statsmodels.stats.weightstats as sw
from load import load_random_hetero_graph
from NIBNA import *
from HWVoteRank import *
from RWO import *
import os
import mvc_env
import networkx as nx
from load import *
from DQN import DQN
import dgl
import pickle
from model import RGCNDQNModel
import matplotlib.pyplot as plt
from eval import *
import sys
import collections
sys.path.append('../')
warnings.filterwarnings("ignore")

'''
#迭代选择节点
def main(param_path,Specified_quantity={}):
    env = mvc_env.MVC_env()
    init_graph = load_random_hetero_graph(args['path'],Specified_quantity=Specified_quantity)
    dqn = DQN(args, init_graph.number_of_nodes())  # DQN类的初始化相当于初始化两个网络target，eval
    g, s, num_rna = env.reset(init_graph)
    #dqn.eval_net.load_state_dict(torch.load(param_path))
    G = dgl.to_homogeneous(init_graph).to_networkx().to_undirected()
    degrees=G.degree()
    s=[1 if v_==0 else 0 for i,v_ in degrees]#孤立节点先选中
    env.state=s
    print('\nCollecting experience...')
    action_choosed = []
    action_choosed+=[-1]
    PHB_list=[]
    #PHB_list += [env.PHB().item()]
    while len(action_choosed)!=3218:
        print(len(action_choosed))
        a = dqn.choose_action(g, s, num_rna)

        if degrees[a]!=0:
            action_choosed += [a]
        # take action
        s_, r, done = env.step(a,True)
        #PHB_list += [env.PHB().item()]
        #print(PHB_list)
        s = s_
    print('choose node',action_choosed)
    print('PHB',PHB_list)


    return action_choosed
'''

def change_name(choose_node):
    le_mrna = pickle.load(open('../data/PAAD_network/le_mrna.pkl', 'rb'))
    le_lncrna = pickle.load(open('../data/PAAD_network/le_lncrna.pkl', 'rb'))
    le_mirna = pickle.load(open('../data/PAAD_network/le_mirna.pkl', 'rb'))

    env = mvc_env.MVC_env()
    init_graph = load_random_hetero_graph('../data/PAAD_network',Specified_quantity={'lncrna':1500,'mirna':168,'mrna':2519})
    g, s, num_rna = env.reset(init_graph)
    choose_lncrna=[]
    choose_mirna=[]
    choose_mrna=[]
    for i in choose_node:
        rna_kind=num_rna[i][0]
        if rna_kind=='lncrna':
            choose_lncrna+=[list(le_lncrna.inverse_transform([num_rna[i][1]]))[0]]
        elif rna_kind=='mrna':
            choose_mrna+=[list(le_mrna.inverse_transform([num_rna[i][1]]))[0]]
        else:
            choose_mirna += [list(le_mirna.inverse_transform([num_rna[i][1]]))[0]]

    # print('lncrna:',choose_lncrna)
    # print('mirna:', choose_mirna)
    # print('mrna:', choose_mrna)
    return choose_lncrna,choose_mirna,choose_mrna

#根据模型分数排序输出节点编号
def model_sort():
    env = mvc_env.MVC_env()
    init_graph = load_random_hetero_graph(args['path'], Specified_quantity={'lncrna': 1500, 'mirna': 168, 'mrna': 2519})
    dqn = DQN(args, init_graph.number_of_nodes())  # DQN类的初始化相当于初始化两个网络target，eval
    g, s, num_rna = env.reset(init_graph)
    '''#参数平均
    model1=torch.load('./save_model/9999_-20.pth', map_location='cpu')
    model2=torch.load('./save_model/9999_-13.pth', map_location='cpu')
    modellist=[model1,model2]
    weight_keys = list(modellist[0].keys())
    fed_state_dict = collections.OrderedDict()
    for key in weight_keys:
        key_sum = 0
        for i in range(2):
            key_sum = key_sum + modellist[i][key]
        fed_state_dict[key] = key_sum / 2
    #dqn.eval_net.load_state_dict(fed_state_dict)'''

    param_path_strlist=['./save_model/9999_-13.pth','./save_model/9999_-15.pth','./save_model/9999_-22.pth']
    # param_path_strlist=['./save_model/9999_-22.pth']
    # param_path_strlist=['./save_model3/9999_-6.pth','./save_model3/9999_-8.pth','./save_model3/9999_-30.pth']
    # param_path_strlist=['./save_model3/9999_-8.pth']
    # param_path_strlist=['./save_model5/9999_1.pth']
    # param_path_strlist=['./save_model5/9999_tensor64.25.pth','./save_model5/9999_tensor(3.pth','./save_model5/9999_tensor1.0886.pth']
    # param_path_strlist=['./save_model6/random_2.pth']
    # param_path_strlist=['./save_model6/random_1.pth','./save_model6/random_2.pth']
    actions_value=[[0]]*g.number_of_nodes()
    for pp in param_path_strlist:
        dqn.eval_net.load_state_dict(torch.load(pp, map_location='cpu'))
        dqn.eval_net=dqn.eval_net.cuda()
        G = dgl.to_homogeneous(init_graph).to_networkx().to_undirected()
        nodes1 = [n for n, v_ in G.degree() if v_ != 0]  # 孤立节点先选中
        # nodes1 = torch.load("degree_nodes.pt")
        f_mirna = torch.tensor([[-1.0] * args['in_size'] for o in range(g.number_of_nodes('mirna'))]).to(args['device'])  # 初始化每个节点的编码特征
        f_mrna = torch.tensor([[-1.0] * args['in_size'] for o in range(g.number_of_nodes('mrna'))]).to(args['device'])
        f_lncrna = torch.tensor([[-1.0] * args['in_size'] for o in range(g.number_of_nodes('lncrna'))]).to(args['device'])
        h = {'mirna': f_mirna, 'mrna': f_mrna, 'lncrna': f_lncrna}
        actions_value1 = dqn.eval_net.forward(args, g, h).detach().cpu().numpy().tolist()
        actions_value=(np.sum([actions_value, actions_value1], axis=0)).tolist()

    actions_value=(np.sum([actions_value], axis=0)/3).tolist()
    # print(len(nodes1),len(actions_value),'****')
    all_values=[]
    for index,value in zip(nodes1,actions_value):
        all_values+=[(index,actions_value[index])]
    ''' for x in all_values:
        print(x[1][0])'''
    # print("all_values:",len(all_values))
    sorted_value = sorted(all_values, key=lambda x: (x[1], x[0]), reverse=True)
    action_choosed = [x[0] for x in sorted_value]
    # torch.save(action_choosed, "shijie.pt")
    return action_choosed

def rnas_chooesed():
    env = mvc_env.MVC_env()
    init_graph=load_random_hetero_graph(args['path'],Specified_quantity={'lncrna': 10, 'mirna': 3, 'mrna': 37})
    dqn = DQN(args, init_graph.number_of_nodes())  # DQN类的初始化相当于初始化两个网络target，eval

    # param_path_strlist = ['./save_model/9999_-13.pth', './save_model/9999_-15.pth', './save_model/9999_-22.pth']
    param_path_strlist=['./save_model/9999_-22.pth']

    dqn.eval_net.load_state_dict(torch.load('./save_model/9999_-22.pth', map_location='cpu'))

    print('\nCollecting experience...')

    action_choosed = []
    g, s, num_rna = env.reset(init_graph)
    ep_r = 0  # 累积reward
    while True:
        a = dqn.choose_action(g, s, num_rna)
        # print(a)
        action_choosed += [a]
        # take action
        s_, r, done = env.step(a)
        # print(r)
        # if done:
        #     r=1
        print(a,len(set(action_choosed)))
        # dqn.store_transition(s, a, r, s_, done)

        # ep_r += r
        if done:
            break
        s = s_


    return action_choosed

#根据节点的度排序输出节点编号
def degree_sort():
    init_graph = load_random_hetero_graph(args['path'], Specified_quantity={'lncrna': 1500, 'mirna': 168, 'mrna': 2519})
    G=dgl.to_homogeneous(init_graph).to_networkx().to_undirected()
    nodes1 = torch.load("degree_nodes.pt")
    G = nx.Graph(G.subgraph(nodes1))
    all_degrees = [(_,v) for _, v in nx.degree(G) if v != 0]
    sorted_degree=sorted(all_degrees, key=lambda x: (x[1], x[0]),reverse=True)
    action_choosed=[x[0] for x in sorted_degree]
    torch.save(action_choosed, "degree.pt")
    return action_choosed


#按紧密中心性输出排序
def cc_sort():
    init_graph = load_random_hetero_graph(args['path'], Specified_quantity={'lncrna': 1500, 'mirna': 168, 'mrna': 2519})
    G = dgl.to_homogeneous(init_graph).to_networkx().to_undirected()
    nodes1 = [_ for _, v in nx.degree(G) if v != 0]
    Gs=nx.Graph(G.subgraph(nodes1))
    all_ccs=nx.closeness_centrality(Gs)
    ccs=[(v, all_ccs[v])  for v in all_ccs]
    sorted_ccs = sorted(ccs, key=lambda x: (x[1], x[0]), reverse=True)
    action_choosed = [x[0] for x in sorted_ccs]
    return action_choosed

#按介数中心性输出排序
def bc_sort():
    init_graph = load_random_hetero_graph(args['path'], Specified_quantity={'lncrna': 1500, 'mirna': 168, 'mrna': 2519})
    G = dgl.to_homogeneous(init_graph).to_networkx().to_undirected()
    nodes1 = [_ for _, v in nx.degree(G) if v != 0]
    Gs = nx.Graph(G.subgraph(nodes1))
    all_bcs = nx.betweenness_centrality(nx.Graph(Gs))
    bcs = [(v, all_bcs[v]) for v in all_bcs]
    sorted_bcs = sorted(bcs, key=lambda x: (x[1], x[0]), reverse=True)
    action_choosed = [x[0] for x in sorted_bcs]
    return action_choosed

def imaxdriver_sort():
    init_graph = load_random_hetero_graph(args['path'], Specified_quantity={'lncrna': 1500, 'mirna': 168, 'mrna': 2519})
    G = dgl.to_homogeneous(init_graph).to_networkx().to_undirected()
    # nodes1 = [_ for _, v in nx.degree(G) if v != 0]
    nodes1 = torch.load("degree_nodes.pt")
    Gs = nx.Graph(G.subgraph(nodes1))
    A=nx.adjacency_matrix(Gs).todense()

    result={}
    for n in nodes1:
        result[n]=0
    for i in tqdm(range(1)):
        # As=np.random.rand(3217,3217)*A
        As=np.random.rand(3164,3164)*A
        As=As/As.sum(axis=1)
        for n in nodes1:
            activatenodes=[n]
            activatecount=0
            while len(activatenodes)>activatecount:
                newactivatenodes=[]
                activatecount=len(activatenodes)
                inactivatenodes=list(set(nodes1)-set(activatenodes))
                for i_n in inactivatenodes:
                    IncomeWeights=0
                    for a_n in activatenodes:
                        IncomeWeights+=As[nodes1.index(i_n)][nodes1.index(a_n)]
                    if IncomeWeights>=0.65:
                        newactivatenodes+=[i_n]
                activatenodes=activatenodes+newactivatenodes
            coveragecount=len(activatenodes)
            result[n]=result[n]+(coveragecount-result[n])/1
    print(result)
    for i in result:
        print(result[i])
    imaxdrivers = [(v, result[v]) for v in result]
    sorted_imaxdrivers = sorted(imaxdrivers, key=lambda x: (x[1], x[0]), reverse=True)
    action_choosed = [x[0] for x in sorted_imaxdrivers]
    torch.save(action_choosed,"imax10.pt")
    return action_choosed


def pagerank_sort():
    init_graph = load_random_hetero_graph(args['path'], Specified_quantity={'lncrna': 1500, 'mirna': 168, 'mrna': 2519})
    G = dgl.to_homogeneous(init_graph).to_networkx().to_undirected()
    nodes1 = [_ for _, v in nx.degree(G) if v != 0]
    # nodes1 = torch.load("degree_nodes.pt")
    Gs = nx.Graph(G.subgraph(nodes1))
    all_pgs=nx.pagerank(Gs)
    pgs = [(v, all_pgs[v]) for v in all_pgs]
    sorted_pgs = sorted(pgs, key=lambda x: (x[1], x[0]), reverse=True)
    action_choosed = [x[0] for x in sorted_pgs]
    # nodes1 = torch.load("degree_nodes.pt")
    # action_choosed = [node for node in action_choosed if node in nodes1]
    # torch.save(action_choosed, "pagerank.pt")
    return action_choosed

def rwr_sort():
    init_graph = load_random_hetero_graph(args['path'], Specified_quantity={'lncrna': 1500, 'mirna': 168, 'mrna': 2519})
    G = dgl.to_homogeneous(init_graph).to_networkx().to_undirected()
    # nodes1 = [_ for _, v in nx.degree(G) if v != 0]
    nodes1 = torch.load("degree_nodes.pt")
    Gs = nx.Graph(G.subgraph(nodes1))
    # rank_x = np.array([1 ]*3217)
    rank_x = np.array([1 ]*3164)
    rank_0 = rank_x
    a = np.array(nx.adjacency_matrix(Gs).todense()) / np.sum(np.array(nx.adjacency_matrix(Gs).todense()))

    alpha = 0.15
    for i in range(5000):
        new_rank_x = alpha * np.matmul(a, rank_x.T) + (1 - alpha) * rank_0
        #如果最终收敛了
        err = np.abs(np.sum(new_rank_x) - np.sum(rank_x))
        print(i, err)
        if err < 1e-14:
            break
        else:
            rank_x = new_rank_x
    all_values = []
    for index, value in zip(nodes1, new_rank_x):
        all_values += [(index, value)]
    for a in all_values:
        print(a[1])
    sorted_value = sorted(all_values, key=lambda x: (x[1], x[0]), reverse=True)
    action_choosed = [x[0] for x in sorted_value]
    torch.save(action_choosed, "RWR.pt")
    return action_choosed



def hit_sort():
    init_graph = load_random_hetero_graph(args['path'], Specified_quantity={'lncrna': 1500, 'mirna': 168, 'mrna': 2519})
    G = dgl.to_homogeneous(init_graph).to_networkx().to_undirected()
    nodes1 = [_ for _, v in nx.degree(G) if v != 0]
    Gs = nx.Graph(G.subgraph(nodes1))
    all_hits=nx.hits(Gs,max_iter=5000)[1]
    for a in all_hits:
        print(all_hits[a])
    hits = [(v, all_hits[v]) for v in all_hits]
    sorted_hits = sorted(hits, key=lambda x: (x[1], x[0]), reverse=True)
    action_choosed = [x[0] for x in sorted_hits]
    return action_choosed


def genehit_sort():
    init_graph = load_random_hetero_graph(args['path'], Specified_quantity={'lncrna': 1500, 'mirna': 168, 'mrna': 2519})
    G = dgl.to_homogeneous(init_graph).to_networkx().to_undirected()
    nodes1 = [_ for _, v in nx.degree(G) if v != 0]
    nodes = list(nx.Graph(G.subgraph(nodes1)).nodes())
    print(len(nodes))
    nodes1 = torch.load("degree_nodes.pt")
    nodes_index = [i for i,node in enumerate(nodes) if node in nodes1]

    Gs = nx.Graph(G.subgraph(nodes1))



    w0 = torch.tensor(np.array(nx.adjacency_matrix(Gs).todense()), dtype=torch.float64)
    v = [3.5401319228058, 1.25913732376532, 2.2812923844474198, 1.87745376446242, 2.4689159795157405,
         2.00945542665868, 1.1676833278588998, 1.82718213329485, 3.87868940875988, 3.19966698397075,
         2.1339018794675297, 2.14540709874021, 2.0983475751405503, 2.68747516352129, 1.51774444052919,
         1.70663431614754, 2.13864576894645, 2.2258505599383698, 3.83484146404881, 3.1996527598529,
         4.8772872415514295, 1.71476619676431, 7.1880726016286305, 1.5968227475320602, 1.88882343749055,
         2.3362345129296602, 1.52073170085278, 2.66991109043039, 3.01887608501769, 2.8996026331081497,
         2.0953502995484703, 2.60198690335389, 3.61698624098781, 4.270631699329471, 1.46740189850593,
         1.5626741452017798, 2.6253701767142403, 3.80780028770975, 3.8931666091507, 2.4224457165422497,
         1.69543199874206, 2.4554268002429303, 1.2985001401507301, 3.8877415373701103, 1.62998890531138,
         1.14786537933121, 1.4748417038525803, 1.20733019557979, 1.3734950999162299, 1.34065265555534,
         1.14070245553058, 2.19731435992452, 3.5759581696036, 2.02618604637116, 1.0999342012598798,
         2.06986022107089, 1.9318224630937701, 2.65333304315578, 1.59196891932528, 1.8853296276904101,
         2.1732987658726497, 3.5238007102133397, 2.06479518317138, 1.4294530396675, 1.0285471632663399,
         2.47946283340902, 2.1769256698705197, 2.49046049590125, 4.383906245094161, 1.9748669589344499,
         2.7059244294216205, 3.83410017966717, 6.637899017836309, 1.98087988858897, 2.7808463225419597,
         3.9278076417922096, 2.0000672565523203, 2.9664873177996403, 1.0956588074303102, 4.161585796803919,
         1.4773715543543402, 1.21728165465903, 1.39558019409652, 1.60130844959248, 1.56695471080634,
         2.4491282475731, 2.41986318207099, 1.9230525074035, 1.89018914319875, 2.3433998998942402, 2.26734825841648,
         2.9764176216675198, 1.3810189347197699, 1.16106971389146, 4.14259013229993, 1.7260640601060502,
         1.95497632075733, 2.6745991655826096, 1.56638967491126, 1.89466721124656, 1.2018717401581498,
         2.32687813132371, 1.9894265825267, 3.7955558225926804, 1.01786343777639, 1.21229765144847,
         2.38657133460742, 2.39761553798304, 5.24336986824026, 3.4141503038589702, 3.89986295014508,
         2.20327943337209, 1.92153621658715, 1.79528192851874, 1.5958416136233602, 2.1572377366589,
         2.57939466256237, 2.11289945799903, 2.03940687868738, 4.16653928332889, 1.31045620913874,
         1.5580778505631399, 1.5857623011203799, 1.34419799455846, 3.60591125009991, 3.4094033912402497,
         1.6476821256204297, 2.1865317691969, 1.0077778092812602, 1.72724262018603, 2.04597628174887,
         1.64989458392457, 1.8618632024119801, 1.25396391310255, 2.24515987992157, 3.14306500023555,
         1.3517356760731798, 1.21652134896992, 1.1985782391333402, 1.33518289133317, 2.1851400377942602,
         1.9846685420435402, 2.0823061236043, 2.49859349457281, 5.289909671388259, 3.99086363512648,
         2.51130072212873, 1.74684669667703, 1.80183976431691, 2.46583575776048, 1.7598199000175903,
         1.85827935947819, 2.2691823156070603, 1.19715022669056, 1.25663323760502, 3.77963451250275,
         5.371504456625661, 1.7771476745011499, 2.23182976709144, 2.7252299781453297, 2.0354695947679,
         3.16742086814058, 5.947080151277009, 1.5285543486305202, 2.19286524868403, 2.6642916898046898,
         2.0066080475471897, 1.7440062278709798, 1.08528156261494, 3.65150933384707, 1.11330931900231,
         1.3679095520316598, 2.9367166424676205, 3.35958289933427, 4.12172531691248, 2.7588942533282204,
         1.75518502168522, 2.28713395410273, 3.44697839056373, 1.67389504613687, 1.94819762846131, 7.66981564863789,
         1.3905795900404299, 2.73774976585136, 2.7077421561773103, 4.7010333951055, 2.31416246390893,
         1.78396962248479, 3.2261640934067004, 2.01060671711451, 2.62929573445285, 1.81355184329153,
         1.54028002785434, 3.5837753683704703, 5.24434935067442, 2.94300141882478, 4.835069636340769,
         2.04869285545041, 4.56058870471133, 3.97318858287496, 1.77419399412791, 3.8747132508783597,
         1.66287253417647, 2.24206120176613, 2.3733180899086803, 3.4345004739443303, 1.05022719349491,
         3.6332391765097403, 2.34474527932111, 2.44540996137469, 2.85612901570216, 2.50616918337227,
         3.02710297619551, 4.0554793051473395, 1.67863456483392, 1.7420237503546299, 9.20505543287363,
         2.80457858398605, 2.48927423661703, 3.40215638937432, 1.9590655298891202, 2.5412742276802502,
         2.96105349868483, 1.5181463586531498, 1.64905254644872, 2.04981431100894, 2.06968613046529,
         2.6020224634704, 2.4371628481329903, 2.1325652934940402, 4.22934441800324, 4.10476969358702,
         2.33381363181093, 2.0494993586243897, 5.6620331927377805, 1.45421386324521, 3.2307987703671004,
         1.38944332120792, 3.18879594343692, 1.01005063014899, 2.92810075110085, 1.8235628684226497,
         1.17398357922185, 1.2982372935733002, 1.57699401757508, 2.30385097160111, 2.00480644260857,
         1.96401374093216, 1.5885322659398002, 3.81623166016672, 1.00239360739024, 2.8327584728117103,
         2.0509810473468404, 2.7254377925081097, 1.5002628615936398, 3.7877324766051297, 4.44096523921864,
         2.25494342560157, 1.06921439396246, 2.13844171234826, 2.26171717943402, 2.11899518948709, 1.39193076606946,
         1.11477681714856, 2.9017827514847303, 3.0808361719676602, 3.16425752418698, 2.59179294804643,
         1.0198355734181, 2.1980257548835, 2.60984341505305, 2.37799498885808, 1.3616022166801, 1.21468124911644,
         3.46877278642802, 3.7572452590952, 2.7783710778583504, 2.17744701407374, 3.2425625825472797,
         3.1264305331430697, 2.29145124712341, 3.5749882882094703, 1.77975495503039, 3.01184270234085,
         3.74996428179221, 2.28375843947445, 2.4840576369887004, 1.5417457256561398, 3.03589871144162,
         2.06388418077033, 1.16922590424249, 2.14806520968474, 3.18827616197905, 2.07936169416445, 1.80302422184812,
         2.59531496643646, 1.76178865718954, 2.39032455693274, 7.13735392257119, 1.94387871193631, 2.55113460277201,
         1.68885232984631, 2.47811197216671, 11.734330475668399, 2.95293081384255, 1.6095261192784198,
         3.0980217197366295, 4.41253049523072, 1.5069231933270002, 4.21407549257633, 1.8202799222110702,
         3.0777620988422205, 4.73484515875032, 1.88104866142904, 5.9493781198502305, 3.20265597081715,
         2.2089464104576098, 3.2900054653134103, 1.1068007957806798, 5.348740861509969, 1.33059433519369,
         5.23183371772569, 2.1789251056299297, 2.79292683985255, 2.93843128432187, 2.70469599280832,
         2.20376208938898, 2.21399186214027, 2.29734285012536, 1.65144841879269, 2.1079302771771102,
         2.10453722509913, 4.587582374518769, 2.82097524789819, 2.70084311065736, 3.0003868912317, 2.58152697547721,
         2.57829591958737, 1.3600409802246698, 6.424195337578701, 1.72562511261456, 2.33172322814444,
         2.27348312156849, 1.4871549734593201, 2.24726627592132, 4.97603940195041, 4.4851191125887695,
         3.83073672148359, 2.37159205774922, 2.20132323674293, 1.68174369533144, 1.49252273177697, 2.40073417521317,
         1.63961307890351, 5.0787013588836905, 1.2656270788855302, 2.4220203127000097, 2.17094439035135,
         1.74535469283871, 1.3815729938716101, 2.10682054977538, 2.67176584046314, 2.23482390582034,
         2.36267615367692, 2.86128837277175, 2.00710465791484, 1.43952936963316, 1.22268753486141, 1.95360528184253,
         3.53261923745, 3.24135289723264, 3.4583217512312596, 2.62992733464971, 2.3074871088169, 2.52740905344847,
         2.79389850426371, 2.3844079958, 1.67110619014203, 4.5096802800799605, 2.47476345154094, 2.87279953384291,
         2.13598063599879, 2.13108665322979, 1.8822544268960402, 3.3259036819387595, 4.41615006868401,
         3.76373550645777, 1.990207722082, 2.33379010900596, 7.011795428853951, 1.5994883581050199,
         1.94812760664049, 2.0520252930409, 3.87714916636787, 1.8336272347954101, 5.57466896677684,
         1.3866917727449701, 2.8547775310857, 2.7490682039805496, 2.03655114225996, 1.7235109075468302,
         1.6015464305365, 3.45481748664923, 4.7048911281064, 1.89051050717449, 3.7094029611534305,
         2.9581031321834503, 2.1891008558427, 2.9812780290677403, 2.33657525585152, 3.45909284811662,
         2.9171225523529904, 3.1352527280169906, 1.73803277705324, 3.36762637064449, 1.13472314068205,
         1.04727646885371, 2.09298650998299, 2.30478345829067, 2.7014064322772793, 3.6334550347039505,
         1.4666406071625702, 1.21149649183065, 2.08612909112105, 2.30382872102262, 3.1198505346250403,
         3.99319341437436, 3.2036846060084, 2.5739139947331005, 1.27705466906819, 3.6477913347032898,
         2.8127413884034, 1.80167348635452, 1.55572845399227, 1.14489840272886, 2.7749352364215296,
         3.60691374228465, 1.89208207231998, 2.56633716547955, 1.74786026533926, 3.37300507552819,
         3.1096265337963396, 1.09883073837788, 1.33167000141995, 1.60638174352997, 4.43541646493959,
         3.6693617075118796, 1.76622166060188, 3.76928667936729, 2.9643794421055603, 1.71858471495577,
         2.71453219054754, 2.2031310181390698, 2.14624135681295, 1.77197681552641, 2.5488559242944704,
         2.4470729470610295, 4.63831206722699, 1.79662786869195, 3.18452422684152, 3.1055301751616002,
         1.4371840222374699, 1.57608245984788, 2.89744634191531, 1.9088384893368402, 1.05168510506679,
         2.26477917809157, 2.21190393088146, 6.91864734541924, 7.967088825058251, 3.20223544319102,
         1.11489403512675, 1.56855451387165, 2.9148253888649305, 2.08140027572473, 1.5989405619750199,
         1.74738128574525, 4.2017290497404804, 2.28306167969504, 2.1072231080407398, 2.6355440496801497,
         2.47667455713345, 1.6291919610315, 7.43072804531585, 2.1849428750474598, 2.78909803332765,
         2.68599362402019, 1.56354562295871, 2.5414746228386296, 2.7681674666802203, 2.3429127663944302,
         1.21855398959689, 1.8524583352679598, 2.1876082094062097, 2.8419138912253796, 1.09204735080823,
         2.1884383525222, 2.59416579048798, 3.14303401642027, 2.0038690176352096, 5.678956530251981,
         1.62151524363436, 1.37851287868775, 3.22522064962223, 1.1784687136285201, 2.93968918686588,
         1.9784618417624797, 1.3360770020077701, 1.5855353722654297, 4.1135424937854, 3.2088206721036805,
         3.0508025469265, 2.93197136989392, 2.52933290568235, 2.2352411443870497, 1.58745684834071,
         4.12022546564222, 3.39887875616243, 2.39748531972209, 1.37506090933184, 2.21925033400311, 2.46374905585525,
         3.53530279124731, 2.60431639782262, 2.7386200670765604, 1.8347912138228601, 1.26129850426659,
         2.3291424167827404, 2.5955975232003103, 2.07292665610874, 2.7962001422115694, 2.40122504871828,
         1.45832172871872, 1.6139854792257198, 1.2681741827955801, 2.8953650429914504, 5.24173097131568,
         1.8221714931667399, 6.50734609921285, 2.07975700493385, 1.6288910230129499, 2.56307885852539,
         1.7066876998776201, 2.05937195140774, 1.81048842025147, 3.0007098431546404, 1.80945110485665,
         2.31785120395045, 2.03684528588745, 1.9341440546634798, 1.42200286144705, 2.21591798197216,
         3.15163184860099, 1.99247909166789, 1.8932980515178799, 3.3174853955229, 2.1634484189076297,
         2.5430170858767203, 1.7028198232687601, 1.92195198210927, 2.20885272481932, 4.94595845836767,
         3.8598663671758, 2.57906445033407, 2.64734268542912, 2.42289345867321, 1.99101764046599, 5.65620330054982,
         2.39798237914473, 1.8822017414647298, 2.7349052024322997, 1.3771291735004199, 1.64057241593379,
         6.46276395010914, 3.7922606508219903, 4.15926660874452, 2.03172639144975, 1.2843253686795901,
         2.4608843865559704, 1.40872878799767, 4.135284733616451, 2.85532370489932, 1.2728888162531398,
         1.5297361782863, 1.72224580305258, 1.9282488640659698, 2.64598821298169, 1.83881007476568,
         1.77037231800692, 2.78204119012553, 1.7790460122209901, 3.8578581890745895, 2.79120907497446,
         1.70364401746572, 2.16732573906412, 2.31301290487931, 2.04624015138426, 1.32766395505696,
         3.1296344318619798, 1.3877214390033998, 3.7128658096015097, 1.84520361948686, 4.3590943755119005,
         4.43127357519156, 3.29842935390967, 1.6318988210005598, 1.6149257342606003, 1.4902370439021702,
         2.6050018985526804, 2.4636337957070498, 3.28543062446176, 5.175576988713879, 1.6694452049191002,
         1.21371574505358, 4.47402423380806, 3.85589709537767, 1.91600340900105, 3.18447064248423, 1.7989924648889,
         1.63521164154871, 3.4782749182855897, 2.6762537703866403, 2.7558558818798704, 1.9506522838951201,
         4.4658964570993, 1.82004925756497, 2.87916002878418, 1.26306039034154, 5.337655566229509, 4.19013661248555,
         1.61967019102367, 2.07198168220467, 1.50755763640874, 1.3372195984873798, 3.45052048643383,
         2.83687901006458, 2.4289693802193, 2.16664153357235, 1.91195349476502, 2.59596457291215, 2.60449625638594,
         1.62236250747987, 1.7325035139300502, 1.8741253124961799, 1.7044106234503702, 1.8784426914763899,
         1.32823408969388, 2.3176466008895003, 1.8235321069284298, 1.36391912892811, 1.3791368731653202,
         1.15940171070657, 1.33616480180273, 2.41518590680697, 5.96469570092057, 3.14172082735808, 1.25904641200888,
         1.17371545045337, 4.651242095801231, 2.62968744241541, 2.6699966015753502, 1.2050444831371998,
         2.1820299777774297, 2.08979570503617, 3.71125169129589, 1.50031581411596, 2.36405537591601,
         1.18934538381475, 2.83362965771394, 1.4003329595036498, 1.59809211444899, 2.7594657516031895,
         4.017172972316491, 1.70068039411696, 3.5199217578546, 4.07816584927479, 2.24795316927074, 2.38915177075562,
         1.7771682410092, 3.1580994620567204, 4.71319821885764, 1.31407329805279, 1.0587396316533,
         2.3311435776779303, 1.7229577021644, 2.0615600889873202, 1.3928102522585701, 2.7048857167282003,
         2.1616121206096204, 1.52281098159572, 3.9546514773339703, 3.7225935733002204, 3.63893118531046,
         3.42712123609139, 3.3155647996638704, 3.0140861518303104, 2.72610731245461, 2.3337635377726604,
         2.7605757178325896, 2.24202876805175, 2.20436609660074, 2.53175688350742, 2.13874751708185,
         2.02984516837666, 2.21593392105361, 2.92137850127716, 1.9611717945135598, 1.94808022879453,
         1.9865757149214, 1.9888333711199497, 1.95459826396676, 2.10946417810388, 2.44935426371908,
         1.84156154029401, 1.9216111715668502, 2.75622900633245, 1.7279864534302198, 2.04666094417163,
         1.70491926711382, 1.6636152069958503, 2.4249989330325294, 1.72993975670976, 1.70039186271469,
         1.6564422200605402, 2.01607983808012, 1.60360416019322, 1.7066564929010501, 1.5754669596315602,
         1.52610968851899, 1.75471468932477, 1.49686629881982, 1.49779045854948, 1.47907349467601, 1.47191103121213,
         1.8325164874982198, 1.58075931712632, 1.4200435197593702, 1.4546122933179297, 1.4332209836183998,
         2.21892713412984, 1.9624707473352099, 2.20625529237552, 1.46923853886162, 2.0930110071621,
         1.6241836701765902, 1.87636650870594, 2.0897565760901, 1.43564742332356, 2.03665263782848,
         1.33801495220513, 1.3385130200326598, 1.43515340103735, 1.57393226220811, 1.54166585006271,
         1.33585981040325, 1.6816433751123798, 1.33082291158279, 1.33776689165519, 1.7809154472491802,
         1.34405596095745, 1.66382881089459, 1.29455051135621, 1.2771294051181599, 1.2845070485081498,
         1.29189956012876, 1.3331455260993301, 1.2637548312115299, 1.34393414708181, 1.3070062130870201,
         1.2860049942712701, 1.25442362658493, 2.22546136479694, 1.65437691448057, 1.9977592688714998,
         1.86805016382204, 1.8059241591217898, 1.20751245416822, 1.2721176588674599, 1.4349863020303602,
         1.2283393935061, 1.21349207656795, 1.6183929883943702, 1.15416675116472, 2.0431939822769403,
         1.18572129706827, 1.14992272360358, 1.18124812210778, 1.3594176791211299, 1.74477797937683,
         1.17037379375349, 1.1292128938384298, 1.25251153984583, 1.1714699689360901, 1.25238876021439,
         1.21716446007122, 1.07021449919548, 1.08280084382178, 1.6619941997701202, 1.27145138359493,
         1.24491553658382, 1.80085645027491, 1.20995957194427, 1.08974417140542, 1.03424812639151, 1.03923349456296,
         1.12517241777906, 1.3852008289850402, 1.05620253523515, 1.02641306804196, 1.1625176314593,
         1.26297114169291, 1.43570014140991, 1.62769248359996, 1.01624324254675, 1.33967066043624, 1.68458292625698,
         6.22696023058118, 6.885892446125269, 4.10098384671269, 4.52147622761934, 3.98213046382241,
         3.6127875563778997, 3.46910541159311, 4.29137692906054, 3.19033426274158, 3.61572842427562,
         2.7302405658474798, 2.6852122075426097, 4.03165851331573, 2.4224434085904702, 2.85882087478267,
         3.4474299760854303, 2.31645227138927, 3.2623679773238794, 2.32185017290573, 2.29334192638215,
         2.28590723019777, 2.13665951768411, 2.1227602563787697, 2.0622601168054, 2.08811787747827, 2.4185591633205,
         2.89950782066938, 4.21544392764141, 2.1216116709631803, 2.22413034824579, 1.83311397487369,
         1.80618217229009, 4.01665525315538, 3.96469444836316, 2.72353229545883, 1.64683858518451,
         1.6027456980216002, 1.55530503984379, 1.61757781053608, 1.54664768375333, 1.4845885475246798,
         1.7681295048282901, 1, 1, 1.6565691409690202, 6.7581926152542104, 2.24064149303125, 3.60032050600286,
         1.05361889743109, 3.97738395548863, 2.82089779694031, 1.14131760516753, 1.82212194719521, 2.66439121727524,
         1.3684444689867, 2.48105856976705, 4.21308557109435, 2.2045325654611, 1.39234860693544, 2.29907596609671,
         1.48324577531928, 1.84479239683314, 2.5822943454418703, 1.9195130759610801, 1.96190207145747,
         1.16638210099879, 1.96945410168004, 1.6014321138985699, 2.20425786275136, 3.1951857765556495,
         3.2264620379664803, 4.98071834239601, 2.28659045398007, 1.51690558365806, 1.6568957437800198,
         1.33833132298923, 1.08608899600547, 2.6154807445901405, 2.32686857028758, 3.2710017645094003,
         2.13724708445707, 1.6753667048503602, 3.16212272850554, 1.68320457474717, 1.01251666004316,
         1.4198764442949, 2.30104820472775, 4.104988211928609, 2.9209996302774304, 1.2671915515098602,
         1.56174376518498, 2.0330473147397803, 1.92582354897879, 3.4714503666062497, 1.8077799139419901,
         1.34669733476641, 2.27092412732444, 1.62231502723347, 2.01267830646765, 1.5158132936457198,
         2.1379235692795, 1.8640303883385398, 1.51697518921058, 1.5510570237877899, 1.37762050128382,
         3.10656296789612, 2.2974159257376, 1.52822831868801, 4.0785623486076, 3.9066175204515297,
         2.4824402077265697, 1.4920632519627899, 1.9308711235321498, 1.6113555959511499, 1.2867955354356002,
         2.44278819178818, 8.48848959022706, 8.346252327767731, 7.571940340494059, 1.06530123626499,
         2.27041303474112, 3.19288311410437, 2.81116479870512, 2.4008190862113703, 2.0720051903831798,
         3.1178987332835497, 3.43250943521946, 5.42286363944254, 4.90779643135587, 3.3091322736998796,
         1.71920520830932, 1.66082522170454, 1.02120953125836, 1.16526058534086, 1.7743501653517, 2.33025220735243,
         2.39916139396688, 1.79091736556571, 3.7610398778348797, 1.48056226859404, 1.41896033717772, 3.164472093487,
         2.1422859370057, 1.0751828475213399, 1.6055618257694297, 3.07796673617985, 3.0188441835575897,
         1.00018583502605, 3.15628179221648, 2.02404895199038, 1.3940593063406899, 2.4097087262756403,
         1.5112731180391898, 2.13872272233823, 1.7547527144635502, 1.95361567146353, 2.8764098274661998,
         4.19788854230881, 6.24175279630269, 9.36582920364055, 5.07206375656583, 3.76669818902252, 1.78193132481173,
         1.1016174403331498, 2.1013708109293203, 1.24875604676213, 1.81686900344277, 1.6347547612056499,
         9.14688927696834, 1.78788659627296, 2.6123695635647004, 3.0379607117021297, 2.6514905220254903,
         4.06627017324606, 3.22333292620467, 1.74039528491643, 2.4040472874289303, 1.30984776003568,
         1.7631350101048702, 1.32494675515582, 1.47745333201974, 1.6925607095679298, 1.41459116623967,
         3.4497891974414903, 1.7282006090038502, 1.52060245439733, 1.03453456593837, 1.31275908803322,
         2.92338576897909, 2.75958800839858, 1.5265063971334698, 1.17901600034004, 4.06914288494446,
         3.3656884742730298, 2.3220494114281403, 4.77841795088972, 1.99667457747509, 2.03741683860587,
         1.98542013811466, 2.1405889843467096, 2.32295037529798, 1.49618603720909, 1.46708409876117,
         6.6050918477213, 1.9441217148708, 1.66200125299625, 1.83637458522574, 1.5526624949262398, 2.19328777017357,
         2.2384117827635404, 3.47134038490008, 2.3770494819039305, 1.32514563870669, 2.15012998892647,
         2.70303064286029, 1.7656213944098702, 2.62513625244382, 1.6147127959795, 2.3877951615144704,
         1.55173619690671, 1.64752313512048, 2.8998589321269, 2.10919666362616, 2.23786097099236, 1.76492143725719,
         2.2849697517757597, 1.9884874466775802, 2.5928053350169598, 1.8490757982093102, 1.4452731405513897,
         1.10861358990218, 2.2164371795482, 1.737001363921, 1.7313603681830299, 2.8336486046809197,
         2.3043243194944503, 3.3514031542704, 2.7944013458601202, 1.4307391375645102, 3.01204396045389,
         1.5216431094862601, 1.8238852041172, 1.7490238489476002, 5.9524099383695, 7.07029898237512,
         2.70925945676731, 10.4650121019016, 2.81765489070295, 2.2617217467187203, 1.90625909760073,
         1.7993289535752401, 1.92128990437725, 2.48024682893917, 1.2657979550513, 2.11696873374505,
         2.29599223476286, 3.629755072709, 1.4931850217616698, 1.20272622377739, 2.73386814831526, 1.09167928011768,
         1.2109860621284199, 2.5669303211283503, 7.45926253882754, 2.37214862704216, 2.7880850684688503,
         2.00199897339189, 1.5181374635601599, 2.44819914589124, 1.93310011196668, 1.7332788028533401,
         2.13813703785048, 2.16622660938353, 2.4599977312186097, 1.28562624502569, 1.3138267137631698,
         1.75152848203385, 1.19992420378762, 1.2530254033238302, 1.46859687936277, 1.35974588090098,
         3.29332329380792, 1.11624047888419, 1.41172036438472, 1.79678703809422, 1.4868080190342199,
         2.01416257582627, 1.3331201504714698, 2.53754285294694, 3.03420799960308, 1.53469259034603,
         4.193828404151899, 1.11869839573573, 6.988861785369361, 1.08147476975766, 2.97130343168192,
         3.1133157284650297, 1.9673601800154799, 1.0171201783307902, 1.72155802825659, 3.6535820399588705,
         2.56031451737597, 2.97483320517664, 1.16575463757229, 2.7455787352969105, 1.3267133370073798,
         2.68060855171918, 6.09636826970098, 1.6999167727263702, 1.50692012238157, 7.438038844407441,
         1.9794244607778302, 1.9316271784814798, 2.0848657710758, 2.11029004759379, 1.9628671986796697,
         1.4634343226360198, 2.06072872988338, 3.0153292837138395, 3.39500986409704, 1.30096528499233,
         2.59798328064089, 1.80434772067283, 1.49729175062064, 2.16109613905238, 3.9871805953521697,
         2.7512378536376803, 2.6073082465582402, 3.04844723384489, 1.94471802500204, 2.37674459830669,
         2.10491120394649, 3.4770014878657998, 4.07252059461948, 4.36903467081413, 4.32521913571405,
         1.51672197892079, 3.76491097804008, 3.56620038169654, 1.26472814096262, 2.4019097639470495,
         2.0169822315457, 1.9190801599124199, 3.63530967327933, 3.4182645874543702, 1.8794327748203998,
         3.6692132270370696, 1.16326641595242, 2.16013886178221, 2.03876698550711, 9.22030507908258,
         1.0829906167091, 1.4892132715178201, 1.87379592631053, 3.41319660270672, 2.8183726009125603,
         1.3082845927817701, 1.7417714613148898, 2.8571700444352204, 1.06153456766479, 2.4889205703051203,
         2.89215959015006, 2.38395890584978, 1.97320688875891, 2.52125631087171, 2.2600579789932596,
         1.6722521305025602, 3.0186041780317794, 1.01809455754855, 1.3634548683706698, 1.3787157523584301,
         1.72384890695128, 1.99340758370145, 1.15089978020427, 1.08984790828839, 1.13653320884821, 1.39159353516052,
         1.2856108158871, 2.7838729188602596, 2.4647051267916, 2.01795535221402, 3.1747044178398403,
         1.25836497597322, 1.44967147873003, 1.02433309055994, 3.3440395724799705, 1.5813570474138001,
         1.91076464602182, 1.2866222703241001, 1.83066957198084, 1.5563699935312802, 1.28880094367579,
         1.620887838971, 2.1437753710367, 1.2917000725263001, 2.4097527582141, 1.6633439170268403, 2.74004648548621,
         1.9496946885136102, 1.20690660858451, 1.04387023604034, 1.12402034162348, 1.3113806757205502,
         1.17146916152216, 1.78974781913878, 2.20350547937019, 1.7437449135468301, 9.86905421805057,
         1.05160862266566, 2.05091100851011, 1.96990391509742, 2.22937511113888, 2.18387780195464, 1.25567929120399,
         1.47931598234996, 1.16093435012493, 1.5567107854752902, 1.48931115179301, 1.4216049865484102,
         1.63093358332032, 1.71369257914201, 2.0018878099731396, 1.70351937426159, 4.09448866460953,
         4.1797979533776894, 3.14069707996093, 1.2150795315312, 1.14739578462148, 2.2452571348462596,
         2.66563199292264, 1.83856403162211, 2.11601662005411, 2.8489040762513596, 2.4581561915937598,
         2.32594823438173, 1.83346956064205, 3.8360937202961405, 1.70469737545029, 1.27569705094506,
         1.3684514373908, 2.0987134694117002, 2.18221709135628, 1.46609200743824, 1.3646044468963399,
         1.2724164127897601, 3.93349566938816, 1.79641376708103, 2.06776844460064, 1.49573463465671,
         2.94935568757553, 1.88214019661383, 2.10240157205091, 1.5634667761971102, 1.46631740359433,
         1.1293995927876201, 1.5586701082447099, 2.20529075613925, 2.0129602280247, 1.5268246352183301,
         1.96728091917067, 2.35549794343556, 1.09779757061367, 2.9637843132194, 2.2373002607536296,
         1.7186906730455402, 2.01904884479737, 2.04450630889069, 1.5437514322745, 1.62892069813443,
         2.64430334664117, 2.6833967112246, 3.65038805521745, 2.5986279584508902, 1.98148131232541,
         1.9623620293295903, 1.7443434592111102, 6.832091186757751, 2.17196519137163, 3.79744235425752,
         1.2370673570130202, 1.64176875837134, 3.56181695027827, 2.4691589608779902, 1.70959788775093,
         1.7353481312912, 1.1876418317109199, 3.38474670436933, 1.8430888350418702, 2.5820292104257003,
         2.06099646624912, 1.77939063373267, 2.37846659537474, 1.5109600881841103, 2.5872389531887796,
         2.5297542017679, 10.6014794473894, 2.04162417511636, 5.03149619412648, 3.20671604928327,
         1.3434266539406299, 1.5547181612425802, 2.41723142879718, 2.46292866678366, 1.28560409786921,
         2.65731986219748, 1.3753305911919298, 1.02632814591382, 1.0697313013621899, 1.1452316568132501,
         1.05110927969857, 2.68098854545285, 2.36044983716991, 1.7569199082251101, 1.6784978831518,
         2.55817671220345, 3.6459614854098903, 1.75493096381697, 1.71650125457393, 1.80822533567936,
         1.6497169469067499, 2.2819246942995, 1.8769723178967, 2.3661439664620496, 3.3520416863312,
         3.74984177196358, 1.7678894751462702, 2.01341630467964, 2.2900364336048398, 2.2201792697854303,
         1.9672297415845001, 2.69314194571097, 2.09562616552753, 2.60253505265886, 2.3068030888811,
         1.7486003113800799, 1.29645029976756, 1.83898347111606, 2.51136121660336, 1.60927800138023,
         1.9785980064084, 1.93826643928594, 1.74727423463121, 1.52837005159105, 1.29325748281571, 1.6817511128755,
         2.7454543610220097, 2.40746901906479, 2.630583032951, 3.01213308371005, 1.66493801707595,
         2.7883146388457596, 1.8116398233006101, 2.0432388800671397, 1.9964453282691201, 1.4673873514138502,
         1.52308896620068, 4.1576293510727, 1.4287652358811, 1.9806850853943998, 3.08095405915353,
         1.1770591299284099, 2.25063696298493, 2.89797903667122, 1.9753342734983799, 1.11078044866954,
         1.9439810301487601, 1.2264958134556698, 3.33258101939192, 1.04082026153394, 3.67577022111745,
         1.7434206573406101, 2.56790363505134, 1.2606531748590302, 1.54084414226868, 1.2135140544341,
         1.67933865323475, 2.6578696460744, 1.4392713024985802, 1.74774215799353, 2.3951113980167498,
         1.5792307039875702, 2.9485103152620296, 5.68137320956621, 1.69514234539993, 1.91753206749125,
         1.89009117866585, 2.49812741024029, 1.43988832306979, 2.45455516662433, 1.5657128447952802,
         2.46022991107017, 1.64927694149021, 2.36109338846019, 3.2459379830042403, 2.07520522046956,
         1.61142974879141, 1.67391806040097, 2.3828202818314903, 2.38720276456588, 1.31880879932889,
         1.4380325317967, 2.6353218415615602, 1.1686561387619199, 1.7910373778106299, 1.2350750738141798,
         2.53754536140393, 1.4935462249359799, 1.4838737403591102, 1.2893534889508997, 1.15693256057964,
         4.30659328970491, 1.8574688569729598, 1.0410803446880201, 2.68589929804696, 2.5772891363944,
         3.17438360449228, 2.90320125777484, 2.11848957165875, 2.15234879864729, 3.0449002264236302,
         5.15770461761562, 1.7096481760748798, 1.69549360514797, 2.8474255466513902, 3.3467755130853303,
         2.42390635728438, 1.5821091968539398, 1.74799942394497, 1.23084311463818, 1.5592509916748203,
         1.6493304664108202, 1.7178585640958, 2.1578799773688897, 1.95954433589873, 1.25042432903188,
         1.85455652834651, 2.29220653936132, 2.6378939411609, 4.77404622988786, 1.6012498107043303,
         5.186610362930231, 2.81327193559325, 3.1150524423917996, 11.138432579634399, 8.50641556662114,
         2.6347640878314103, 1.46330908610832, 1.6233360562291699, 4.3111367345935605, 2.09990581814359,
         1.83154066559866, 3.30881782382873, 3.72832207844715, 2.94402742814181, 5.15009024244803,
         1.5818325966809899, 1.79445283935824, 1.8763958262957299, 2.14792356784189, 2.0893455312442,
         1.79730102499424, 1.91969417322415, 1.8451045804593402, 3.4539234654064304, 2.5522917093868998,
         1.0167222106167801, 1.34864944193559, 1.66660250230946, 1.58444988349457, 1.23870194231541,
         1.79077023144283, 5.2768978212543605, 1.55853872096425, 1.6469254853736397, 1.5367897133839301,
         2.83257842692978, 3.30582576774571, 2.71980687197564, 2.37674446793485, 3.3135110435823103,
         1.94052180429753, 3.05198450041905, 2.6922355108439904, 3.29894936039927, 1.72008847409462,
         1.1428163036224699, 1.49853174364405, 2.06794004627842, 1.98869119163321, 5.22635692327305,
         2.22088765220825, 1.51309154250148, 1.3017906821365, 1.81150836688979, 1.6584247097010703,
         1.47821862591086, 1.97707634070925, 1.6321483814761102, 2.69053313869014, 1.51019771724804,
         1.5619716690999, 2.2236505479531097, 1.7150206430808899, 4.2108616666518, 2.30599611526479,
         3.1226345813554706, 2.48523963540254, 1.1700613519586498, 2.12674958567271, 1.17747957065033,
         1.2663224653233403, 3.6276376904796295, 3.5348681318628103, 2.2791543736223, 1.67946632514458,
         1.54659291743932, 1.88967182358693, 2.13077043604004, 2.2195779024205096, 1.9593467043161499,
         1.2314815442525802, 2.32562096199999, 2.45546191846008, 1.6770255144160602, 3.4734918921953,
         1.09387824393996, 3.8432768086126603, 2.18704077731103, 1.46983484137416, 3.6276461908566,
         1.9608365219733102, 1.5974558075890402, 1.2502471420319399, 1.97117036973063, 4.59309685785943,
         2.4710657988697795, 1.81148026114445, 1.9745427137614, 3.61552644037894, 2.6834936466874, 2.33593837463758,
         7.9467547393876306, 7.885059972122161, 2.9845658178148597, 4.49919135730424, 1.68035388336675,
         1.22500143786738, 1.89582030098874, 2.04093193392323, 1.54578279114498, 2.9831643233895804,
         1.53002705336359, 1.6421161026181001, 1.7350356549271297, 1.5956452702379098, 1.30326943634357,
         1.67580107909049, 1.51629205728757, 1.36736243184127, 1.77749640495152, 1.6238995278115702,
         1.10443997618584, 1.4509920619491001, 1.77691466892479, 1.46771097977171, 1.74049826813485,
         2.42334638626897, 1.3727438476531002, 2.39322082404932, 2.0381870351181104, 1.5162289509882803,
         2.29247754524005, 4.50285698003498, 4.731663571333531, 2.58045990799384, 2.57525759066902,
         5.377283628353309, 1.37798799375562, 1.06517600521043, 1.58356229366632, 1.6838125284869099,
         1.7111244085219601, 1.6534590281509298, 2.90493942353679, 1.24744768810847, 2.9005416366182297,
         1.98188565545757, 1.0983062505122199, 1.2342063831077499, 1.32737785367839, 1.28021952665284,
         1.4604185042331999, 1.19690051717076, 1.2478707745516, 3.64085518791202, 3.6474787628369505,
         3.64870576710769, 2.31828201505702, 3.1158548995799498, 2.4171018116340197, 2.9824867774605797,
         1.87719783882767, 3.46317269561969, 3.64888129955238, 4.11411182018013, 1.51608631043882, 3.99769265455432,
         1.84905833586456, 1.43186467074507, 1.4869796078247601, 1.8173258917006698, 3.31035176305623,
         4.48306720365677, 2.7140398458113597, 1.5437682039433203, 1.93898944534035, 1.56623174226886,
         5.126789494195309, 1.06966450356331, 1.3679153075326003, 1.5578614380726599, 1.38999927581176,
         1.83747933316731, 1.03434142083958, 1.74580674116581, 2.0301981214315803, 2.02443172949884,
         1.75340451652256, 2.60577781213042, 2.2772911625799903, 3.55337593944279, 2.48571101003738,
         2.8891909301456, 1.6778443834263301, 2.03560082037398, 1.5187699837881699, 1.20310052082085,
         1.05873405763661, 1.6404279966188797, 1.01933488460464, 2.7024753192745297, 2.3253688528343397,
         1.37624160064448, 2.38229747983346, 1.5932513813537, 4.1825684082085095, 1.8818234713466298,
         1.1334736160918402, 2.01013083410761, 3.0032860095703597, 4.09082673424366, 1.30415540656698,
         1.7725758763056298, 1.48081989414533, 2.53075683721762, 2.5114942727833904, 3.47976713151717,
         1.59466369758318, 1.6498511631476798, 1.8997432321801102, 1.98202037584703, 1.01685134110761,
         3.3857014191104002, 1.5319473527999299, 2.64452046989423, 2.42670104215265, 2.0789603136846204,
         2.55962192354463, 8.94549187223213, 4.17201662178035, 1.23940353889116, 1.52732374010704, 4.83780661521989,
         2.87959160074248, 1.65411413145148, 1.6899602348696297, 2.18747408566832, 1.22977633208209,
         1.5798745725615702, 1.8859313718356001, 2.05487486741483, 2.8888002763021703, 1.4973694465112,
         1.31964123626789, 1.4122141192102098, 2.58318776217839, 1.83234190093728, 5.6314092995722405,
         3.68314495500126, 1.25081565482795, 1.8256453600833502, 1.0158258794725101, 1.06020683874302,
         1.3144878234287, 4.74259994446688, 1.70561378763614, 3.6495875952782297, 1.8231482921743998,
         2.43538661720863, 2.4106301212743197, 2.23555603503084, 3.03419978635202, 1.04232020400698,
         3.95508623024345, 1.7153818321856498, 2.41600909365182, 6.7758209760497, 1.13045069554906,
         1.59248100883266, 1.9253498266054199, 1.3072137601523102, 5.30140879603077, 1.42063532866539,
         1.7382804708034099, 1.41202354381902, 1.72377384489537, 2.26606771610954, 2.33029964016445,
         1.66843688165068, 1.17232620589295, 1.1419757088279, 1.6664186420965201, 2.6880732872003503,
         3.08549975595898, 2.77369560952976, 4.29583955812447, 1.0652339095806, 2.01035059850577, 3.00110268679182,
         3.15825498589233, 1.72317290384478, 1.21212409178555, 1.73033742095797, 3.27450876225958, 2.22206062067,
         3.39229757627929, 1.0903283466325302, 1.88523596802165, 1.72831392858209, 1.1599810628118101,
         1.15278641842083, 1.91037387187231, 3.80751009026635, 1.4439398275600501, 1.26925977711221,
         2.75872992279095, 1.11667782769657, 1.6607038162419399, 1.89212597302052, 2.6186049415260295,
         1.1041615727545802, 1.6444516507800502, 1.78529096757458, 1.4869979205139898, 1.9938998556608998,
         1.61676268112944, 1.60668975843263, 1.04152144414312, 2.15680686341281, 2.4361086270524104,
         2.08950405443133, 1.48610549508631, 2.12625163650882, 1.5179515730101298, 2.26470898132951,
         1.5452870252932098, 2.32891930492836, 1.4950487305453202, 1.1175813170688302, 1.1401440765511799,
         1.4847596139706698, 1.14845696864352, 2.21487303051152, 2.02680166838344, 3.37414601545662,
         1.56106283743572, 1.01301907876132, 1.56774010441766, 1.0701033611880402, 1.51743062402377,
         1.00996815041691, 1.28694173854271, 2.06027891883978, 1.5034522918903999, 3.46331935135272,
         3.37209091093553, 2.4958379257693397, 3.62312381821027, 2.63044956062968, 1.06209911844084,
         1.7344808700314098, 1.19909331648413, 3.22508109256729, 3.10917729033937, 3.0407330365714103,
         3.51727133036014, 1.87499557212758, 1.58391615792994, 1.4636356702338302, 1.7257836876175299,
         1.7427526628263401, 1.3107318435029098, 1.9716680759397, 1.62472910779682, 2.78166190239794,
         2.44527757293729, 1.05471852050024, 1.0693293876015502, 1.98264585465323, 1.8739419489741698,
         2.0980456621541004, 2.68254626704992, 2.4356198119944, 1.8886022334857198, 2.07446424695204,
         2.18089893175333, 2.63009645360025, 1.6737314201473599, 1.57273171391965, 2.24875533449969,
         1.7059798279829699, 2.44693048334679, 2.06388286462208, 1.69957824979269, 2.2513634136783702,
         2.30309256796281, 4.14527080236656, 1.6381831339951798, 2.5626389821530497, 2.1963812571945702,
         1.3792638906883299, 1.3684234569217, 1.9655894637556899, 1.1592697282295399, 1.07815411355148,
         2.03969945778526, 1.0877994033943699, 1.09436484414733, 1.4755005105755001, 3.02722735063752,
         1.5086201448691001, 2.90932479919902, 1.03876852656381, 1.7636538520865601, 1.79416959012037,
         2.72742770489275, 1.9322340765139898, 1.16735251601056, 3.6743951645048303, 4.02512655441539,
         3.7981190875791095, 1.4757190662862, 2.5422587368704903, 2.54154575094589, 4.22821784016246,
         2.2962257539179705, 2.24245855945055, 5.52237708159675, 2.9544847215555503, 6.980278083537941,
         4.5984045510469596, 4.55438530352386, 2.70970147221568, 1.7878616185985499, 2.07085071057387,
         1.8448878682246102, 2.18426417136624, 3.8651833214449303, 4.84351726590805, 2.49427343333948,
         2.1729484334244, 3.4635715154821605, 2.11284504208671, 1.6854927560008002, 1.83453025250256,
         1.0846015366627901, 1.53386171658982, 1.4750821518746497, 1.78254110691466, 1.02377993027248,
         1.83965341332352, 2.7675731673133797, 2.19749446041637, 3.2298211658237403, 1.82032581659131,
         1.5848781351809498, 2.5625367467335898, 1.13867123350023, 1.48417555363451, 2.90301698068038,
         1.0648091101768, 1.12147312557261, 2.0487586564741798, 2.09978753739387, 1.94520487459618,
         3.9781020225260297, 1.08567303308434, 2.6753161682924502, 1.8442607440269099, 1.35069923148595,
         3.61204893734792, 1.70579039669663, 2.0978516827411, 1.31391356371932, 1.11571956119907,
         1.5179608255538402, 2.17868846345306, 3.29006509488801, 1.2604824995566999, 1.00073563153664,
         1.95197647716293, 2.46655569134992, 1.9740593167449498, 3.46990832977171, 1.27409371688209,
         2.3849672472462498, 1.83557064035076, 1.46845016584273, 1.26453646417476, 1.9225188882282298,
         1.7431147067233301, 2.37668266180575, 2.82390599234066, 2.8456813376312406, 1.98445693511942,
         1.062211867241, 1.06163911918462, 2.1594266364323897, 1.2202181067296498, 2.2379727413492003,
         4.1248856186854, 2.7750134898586603, 1.82764867627673, 1.07637511168, 2.31459669126013, 1.55306102423242,
         1.3969122563067702, 1.82643091226668, 4.63310871319836, 2.9468573511433798, 1.54384554828396,
         2.45823139316326, 2.10594777076626, 4.95282687716884, 1.1597994915984098, 1.46153971884727,
         1.5007798449073402, 3.4733578084005696, 2.07822258689964, 1.6395833565305098, 1.35176159999665,
         1.7595485401916102, 1.3525122010757, 1.15902991090298, 3.59681308968557, 1.3102869277521498,
         6.334253203974071, 4.871813109395861, 1.88567869824031, 5.754101907060269, 1.87769480842679,
         1.20474289689427, 2.42157815537432, 2.42459667791391, 2.0243699684265803, 1.12882828890466,
         1.4807295842964399, 1.8123346329373602, 2.54613546334155, 2.8102278460939596, 1.12347055421955,
         1.11365512478736, 1.48737191824293, 2.38870780706117, 2.50663731842498, 1.09192144267341,
         1.9111996724681202, 1.71752041239743, 1.75506002895425, 2.28642961362172, 3.74799642380121,
         1.3919007585581002, 2.45705639315521, 1.2585706704700002, 2.21632446638758, 1.00591706554709,
         2.08166365723738, 2.0582822567353003, 2.32491712168035, 1.1950884213556698, 2.15557061644401,
         2.31089798175016, 2.15888000580426, 3.24749363969743, 2.21509519709831, 2.07202724514514, 2.47048298191234,
         2.68968290510275, 1.798486220646, 1.68226709372186, 1.8572934326739, 2.01348475821675, 1.4973922765506202,
         1.54590775777409, 1.5838678383476898, 2.80093749363854, 2.4094022526627903, 2.8164443279813796,
         3.9302314424735294, 2.3944907116175, 2.31238276003193, 2.0637096801138, 1.7309250882009801,
         3.39387542039379, 3.5764207456946804, 1.54487462476031, 1.7453967472879, 1.64457276435375,
         1.9928475211804098, 2.55332123286078, 5.73327020496315, 6.929894326835719, 3.68454768087628,
         1.9298097522618898, 1.55866895443948, 1.2253188704531, 1.5133330319896499, 2.5407240591327103,
         2.46553580102579, 2.49232911814123, 2.69309325820311, 1.17013949884553, 2.23000510442716,
         2.0887041201770202, 1.84592246766273, 2.4502307260965095, 2.05618308217116, 3.3489193673857898,
         2.6688206473195297, 2.7248814777780197, 1.77482629363067, 1.73451414134039, 1.3205756548001297,
         1.9931795046865701, 1.8540799491806002, 1.47768430074154, 3.91103540975807, 5.265417948874481,
         3.65714715541015, 3.29158860779355, 3.41884926044155, 2.32269680696404, 2.40584845498507, 2.87065415360015,
         1.95955222138131, 1.88882931288266, 3.87433831622526, 1.87041982699069, 1.7227185311576299,
         1.17378396277129, 1.37297221081478, 2.3311375476999703, 1.5167869552151998, 1.12181729528233,
         1.4028693283946898, 1.1543210531903798, 1.23822720102242, 1.4060392741782701, 4.08257835424393,
         3.7344808315236904, 1.5717189203232398, 1.20203907884589, 1.65788247639498, 1.2095480812566102,
         4.71761916936939, 2.7123728469883504, 3.02769325448174, 2.5158722437309198, 1.6235939697862398,
         2.27820111555271, 2.8505295752405, 2.00574140582183, 2.7949978533925295, 2.9244260930493597,
         1.89704387074635, 1.59932110299136, 1.06059482921203, 2.5278928398529197, 4.79029715493748,
         5.4451100866577695, 6.16622932432954, 2.32524842337151, 1.5174085814613798, 2.6116126074757298,
         1.03197657781786, 1.14750233645174, 1.9949898291633201, 1.6144850027768, 1.23114913562982,
         1.36704436715985, 2.16731666684717, 1.6902261511881203, 2.27535844058973, 1.5771117497767901,
         1.2676845029508401, 1.4831316788854598, 3.7270763194520495, 1.6010457403998402, 1.6598089190714198,
         7.4517372690731, 1.62506408546421, 1.49837488817839, 1.26112619526242, 2.0411869911815, 1.27996645670826,
         1.6153221555407802, 2.0244541244967, 1.34854008189459, 2.57853003657512, 1.97986438513502,
         1.81449392275976, 1.9065280017877702, 3.54885643153044, 1.4223651351749098, 6.129855328049491,
         5.379354019966461, 1.78821518526131, 3.2352161050587203, 1.6991402239068, 3.35195066989527,
         1.80048442383487, 2.37034322125, 1.02261849499781, 1.02041538782713, 1.38358246947406, 1.64538489388393,
         4.21373337521321, 1.3933587163326002, 1.3981830110556102, 1.4737889367129902, 2.01529950956554,
         1.6735412912459697, 6.41991493078087, 2.6855895760899, 1.85914774561072, 1.73514406853733,
         1.19335883456802, 1.8953868291323, 5.776296545441131, 1.83640049657872, 1.7972807191094398,
         2.35689415074369, 1.4459594812750802, 2.1676661541080002, 1.4830799617987098, 6.059279320793951,
         3.0925873652908997, 7.397776477025079, 4.72112064630962, 7.634727180460191, 4.5553727461869,
         5.42203920641932, 1.60551736596246, 1.54076518899984, 1.85693752226217, 1.1293675562690801,
         1.9799766271918702, 1.70566416405044, 1.46792926632453, 1.74227802643071, 1.64130804214189,
         1.1239708337733998, 1.78912393516727, 2.0205113117296203, 1.7274155686482098, 1.9282577679856003,
         1.9125321370677302, 2.0880810689115603, 1.86035282373513, 1.96236811264624, 1.30055876129274,
         1.09047329883674, 1.3758402147639999, 1.5196703437194299, 1.48417382043873, 3.4810082379933305,
         7.17030059250546, 1.4766531335007802, 1.10792291748027, 1.7059069080700902, 1.8604380236187399,
         2.86212756342297, 2.7030119042003595, 2.26869156300809, 1.3753476049423603, 3.7091856302151096,
         2.43156473910725, 2.20483588080704, 3.27586000613267, 1.7057317879689802, 3.6807992311267204,
         1.91036935631802, 3.9128155163619702, 3.29403484813839, 1.02319838961631, 1.5429004539146498,
         1.57857636149299, 3.5493089374138997, 1.11249943076557, 1.01047788417254, 1.2889637596332801,
         1.80518982645005, 4.42910975336619, 4.6999154528948495, 2.76712611315927, 1.5679513223160202,
         4.6252579827997895, 1.7623616801102702, 2.34554120698207, 3.64621795312249, 7.39768582893559,
         1.07232424316758, 3.5265638016737597, 1.67081259192522, 1.6013964669595, 1.8686367085592,
         1.5996811032854399, 3.4311974766706097, 2.3267108065151, 3.8169348487492503, 2.68871001195532,
         1.23023494266173, 2.1288997930785802, 1.5462979073403, 2.2791474659388102, 4.52995844296472,
         1.1577192232824198, 1.7961557105773702, 1.30467589790258, 4.08942796767137, 1.5925802151180601,
         2.41951959606168, 3.54974178794536, 1.65377870976619, 2.73192040698789, 4.666142381557781,
         2.00596578909356, 2.66022955885569, 4.57749450930212, 4.83628197551245, 3.65667509652493,
         3.9045941933530597, 1.43648581218272, 2.45313129554714, 1.0774664989095102, 1.29702826595586,
         1.3504262119777302, 1.57890393018222, 1.68253784521074, 3.09504221634156, 1.4855805340117199,
         1.1185299623421698, 1.15992393010724, 2.06385379287786, 3.21224394371951, 1.5423082994511899,
         1.5814314976335702, 1.87086942143711, 1.9068370252497, 1.60383247666305, 2.36255379066675,
         2.06939810901101, 1.6702058303173402, 1.03187550046318, 2.63609766556462, 2.05371655554666,
         1.30843208304355, 2.5104019323902, 2.36025364448075, 2.7083533516892797, 1.91677074572275,
         1.3885615565937501, 1.32478250599352, 1.70838411527007, 1.3064063280482199, 2.7542965600416296,
         2.04593020428918, 1.50980934846929, 1.34197107145432, 1.8974908661728103, 1.6454458998271, 2.0774715229006,
         1.85638017954961, 3.25432584697086, 2.08175437356438, 1.85562021832876, 2.58690325278485, 1.38274155679624,
         3.25348760679852, 1.64049542613972, 2.2242859096850296, 2.01395992546762, 7.480096427505329,
         2.59676553677977, 4.33278979253981, 2.80895593620595, 6.70475160688775, 4.22073502042108,
         1.6193099091771699, 1.38069728690869, 1.1120672476675602, 1.4988907667079698, 1.76057965545405,
         2.72916681563783, 1.6729992529508502, 3.5808645206346297, 3.83605967026415, 2.25885545010225,
         2.4263448832069905, 2.2533370527193197, 2.22830530394602, 4.73606050059758, 1.9997439342146102,
         1.9882414546164298, 2.95993388929685, 1.31045942901882, 3.34651109519032, 2.1593530221297197,
         2.45181190081955, 2.79319742058493, 2.3181427910585897, 2.33855404121192, 1.75635149881023,
         9.83386667577279, 1.04847754226336, 1.22532006760897, 1.8796429196539097, 2.23942215174278,
         1.7341562054786102, 5.0487837091914205, 4.57495634158826, 1.56116642806234, 1.61626854230551,
         2.69692990628371, 2.7812011163984502, 3.0889533736495096, 3.42816225473515, 2.19328237347747,
         1.4804410028611001, 1.5176110845639599, 2.10537180587513, 1.11131678068581, 1.6373160804417,
         1.9423346459258701, 2.88916788818373, 2.27302497921093, 2.7412137412326403, 1.4961986859006797,
         1.6134182886353001, 2.13968299994594, 2.1988359031912403, 5.9335648884672, 3.4412470475223302,
         1.02129849287561, 2.59051660484755, 1.44824863745665, 1.87125348369349, 2.58358239827411, 3.5083708954942,
         2.1198707984331797, 2.57180076737682, 1.2015662910357299, 1.57672093049793, 3.21405720239431,
         1.8416561378818899, 1.45761958309564, 1.64389207033575, 1.6558094566153703, 1.9990000197112399,
         1.2649428281368502, 3.7854310992484503, 1.08603825138336, 2.92324141365479, 1.79184930844633,
         3.01085413542429, 5.62390118103774, 1.2154131799044199, 3.22278633878383, 1.11762759539211,
         3.27997078078776, 2.9302374557365205, 1.94072158170274, 2.09432160985631, 2.83787543090495,
         3.3911177971910695, 1.77878377029228, 5.4363153316399595, 2.17105697957337, 1.8871110077006998,
         2.25277363384848, 2.33074178612648, 1.2887351200680501, 2.1200512064044, 2.5872242474961498,
         1.06985226398233, 1.51742914759839, 1.00122218965904, 1.90422196860955, 1.79054804981354,
         3.0027630966483905, 1.4246131347772601, 2.22858210921838, 1.5897179701638302, 2.3983718670427,
         3.6720447999039303, 3.10897277486861, 1.16537789765585, 1.31168068204771, 1.6812525709923798,
         1.73648078551591, 1.0807957041782301, 1.7124256385045502, 1.25153494320895, 1.1778155456588202,
         2.32179586325957, 2.3809109148770498, 1.5329577106196899, 2.1399062034093896, 1.78818305990761,
         1.9358482334800202, 5.53317836339254, 1.51495560768277, 2.2329034460208796, 1.8238077527293501,
         3.68343351446397, 1.8928538044574499, 1.77114946996743, 1.7396594150133602, 3.97530854548823,
         1.3783411433589599, 2.47602353324087, 1.39993907784081, 1.16631289641136, 1.4541304002245101,
         1.29230870378995, 1.20137726309827, 4.7881955577585, 2.00765845762963, 1.32418702665755,
         1.8844142571832498, 1.5697196687628099, 3.4519590983198, 1.20495845470458, 1.3194149618089799,
         1.64982065413192, 2.961094974347, 2.52250514356086, 2.57924960024253, 1.38531220107323, 3.8380915247322296,
         2.8172865977850003, 1.3348663143659598, 1.9472632466041397, 1.4745867387976297, 1.4093894623787901,
         1.68096568380357, 1.9410610113430402, 1.02652889343581, 1.94455644484406, 2.22149508588227,
         1.2415674926081202, 2.1597530498290602, 2.16599107308723, 1.5073830023296602, 1.5013839388815902,
         2.0465749956774197, 3.8165667717272997, 1.90904791902749, 2.80902390772869, 2.95522791582021,
         1.28080734380554, 2.9265233141472597, 3.3513322040570803, 1.52254947530601, 1.724232410592,
         1.7070512778081999, 1.96882966141392, 2.09632408179927, 1.94858523458862, 1.5953971758519199,
         1.8435390985116398, 2.0590950475477703, 1.7042222801209799, 1.6384264693971002, 1.54672991775272,
         3.88249291679472, 1.4244504181465802, 3.00087436884503, 1.43469904546865, 4.35869268406043,
         2.73778431634897, 3.5588774936434597, 1.0083192729792598, 3.11096329964563, 1.03058090350751,
         1.8330960800197802, 2.03671380456582, 1.10656732594696, 2.18436041353069, 1.49491812572714,
         1.8868166682889802, 1.76861326926036, 2.6909940526345, 2.88072421010961, 1.78528310820447,
         1.63504623084881, 1.5890259281822101, 2.0206906936647298, 2.84439680787997, 3.10203135989876,
         1.3825629404498, 2.05059884544526, 1.57949175956916, 2.9862327992939, 3.15042525281812, 5.35463855798244,
         5.23764210596167, 1.63530854809654, 5.499846008742269, 6.5302482386013, 2.87389961522745, 3.13781689339388,
         2.80286653875049, 3.8988051892188103, 3.32226939157489, 1.5787959345024698, 1.5280472291977,
         1.92252695470747, 1.3087086761385802, 1.4342183427358701, 2.0253984741083797, 2.08560074614262,
         1.7052931049136, 1.97474343764405, 1.53570404499578, 2.33319930692933, 1.15748603867532,
         1.6651820733528602, 2.9337970686986297, 1.7712516187064902, 1.3758262558095, 2.40132349616381,
         2.14621435184157, 1.2562098435541398, 1.38673867180179, 1.56067791581247, 1.3606749906251299,
         2.37128817016879, 1.96496863270665, 1.54572409924531, 2.5539506822392797, 1.60901551248422,
         1.66038156467976, 1.0716648997626599, 2.03623917207726, 1.6644456571080601, 1.62188071754695,
         1.52822271252101, 2.0593885998123, 1.41050513072806, 1.15548279158517, 1.11550483902762, 1.02976569887934,
         1.5682773673387802, 1.45278480344555, 2.0044742352434497, 1.63917942280435, 2.0688578630368797,
         1.46429567682964, 1.68811616023747, 2.11895336180326, 1.5883510896811, 1.6547172996494197,
         5.7349593881048895, 2.8263833796854003, 1.1914771248749398, 2.3183948758590898, 1.9154791960835702,
         2.53594278887811, 6.17456922096918, 1.32375564460001, 1.98743947579036, 2.3110463958011698,
         1.25211892301577, 1.31405318394207, 1.67405889029155, 2.39178913990974, 1.5509790791479798,
         3.69258916595509, 1.76093488990059, 2.18521955092717, 1.0073439094667, 2.11882894030289, 2.09166341091822,
         1.86236537293607, 2.0019030300673797, 2.46283183768344, 2.01536817389092, 1.9289343824312402,
         1.15186154699619, 1.96916513559601, 1.02350757769106, 1.07614160249985, 2.14598558635001, 2.0382557477058,
         2.4745119098411097, 2.03623074427852, 1.4860907545369801, 2.31160887789678, 2.9542529404622995,
         1.58070574831486, 1.61012680210103, 1.91161397602824, 2.79443441021093, 3.36749262127451, 2.68236003023805,
         1.7115245503471201, 4.3051922329971095, 3.1215465027521003, 1.8193267938653999, 2.4433022542119,
         1.23238140606684, 2.44348926130839, 1.82612318404498, 4.65668226738131, 2.3409678766984903,
         1.64236813551568, 4.0099037854740205, 4.8240338298823895, 3.3674515973250196, 1.28629941704669,
         1.353967764704, 4.72137241115867, 1.1304295171643102, 1.8173345113009598, 1.9384529678860198,
         1.58709732556775, 2.7409821798856098, 2.20552503460755, 1.07389148442748, 1.1361469080966102,
         2.553760797576, 2.5470101550883504, 2.32276016121979, 2.05798148842511, 6.259316842876821,
         2.22068500559465, 2.30986947950412, 9.15487767810485, 4.93745330891707, 2.10555593373202, 2.15089382064083,
         1.6771095101249098, 1.7559843405781799, 1.8895413242876598, 2.73443821541108, 2.08862662165145,
         2.85300174281779, 1.5394536024101002, 2.5570730985944, 1.2048625776009099, 1.4672793990290098,
         1.02744132310861, 2.8003940665737903, 2.05016573247343, 1.68871326682098, 1.69604480405615,
         2.22587879084238, 1.05086451493773, 1.7809816955333, 3.02986244124934, 1.74001196473212,
         1.0771576234445701, 3.6104460040309, 3.9331346223379904, 1.7160134676616001, 1.3968224783863201,
         2.6473045962170203, 3.10611299725314, 2.62794668809372, 2.44333207128718, 1.60451583830253,
         2.6443753182543, 3.3457866598784305, 2.8202359129967403, 1.9556561499382499, 1.08636929460633,
         1.92655153543165, 1.5328014602259699, 1.6037838377357398, 2.06048209624946, 1.82941388090229,
         4.6582880330557, 1.5454956851060502, 1.9083319355626398, 1.20363855122174, 1.4383241932536799,
         1.01285676636295, 1.5878954870788202, 1.88713770735015, 2.7140805188480495, 1.8938941751728002,
         2.0790369896838103, 3.3103987867614104, 2.0064769064377703, 1.11165676312748, 11.731331553064699,
         1.3203320087660901, 1.02205235227941, 1.5264580509023702, 3.04417162370996, 2.05919707261733,
         1.47170174231156, 1.93147853001822, 1.61343631081482, 1.2087693392328998, 1.42169849858131,
         2.6596592521596296, 1.6077836601031399, 1.26571405070234, 1.71307598186068, 1.6122685450652299,
         2.48754494275268, 1.5419961343377802, 1.6603923433803702, 1.02466773005145, 4.68034038287629,
         1.14030381385843, 1.96996548521103, 2.07961469745873, 3.6644778656459804, 1.04588066281606,
         1.2222746195048702, 1.1898862435714, 1.53255211411679, 1.5534775688806102, 1.73013910852173,
         1.6749859468486101, 1.2329704824773402, 2.2029481570178597, 1.71653456964452, 1.27441675835327,
         1.8802912412855401, 1.05292485786617, 8.109506205880361, 2.0689236289059196, 2.1864728201474,
         5.03752548187815, 1.61375619221504, 1.00839409770493, 1.1724669019901102, 1.6650824005078, 3.7544740294132,
         1.06358217256984, 1.5059006766855902, 2.07368606364801, 2.2805884568416404, 2.0158155663624497,
         2.491369777299, 1.0673200537406802, 2.6933487215356298, 2.8416659063651903, 2.30220620791723,
         2.06976607189426, 1.5629883851886899, 1.7043374340789, 1.8263580653800902, 1.63284466593043,
         2.8229332705715002, 2.62328829763916, 1.9895954090182297, 1.97273871828592, 1.8613565926274398,
         2.12400344126248, 1.83940036701923, 6.43002908833346, 4.04987058954174, 2.37695142079671, 2.20120831959079,
         2.12659543625351, 2.919882355826, 2.82657540368036, 2.84798029339463, 1.86471232934179, 2.66548086847189,
         2.84857643892919, 3.43900677028472, 2.7579132127872206, 5.7391048720428595, 2.31684963261639,
         6.46591525318018, 5.19603875128661, 2.8006696449688704, 1.71805549614914, 1.45990554260178,
         1.86794033414314, 2.1036439808456002, 1.21139796090927, 1.60814911867383, 2.4658475745780097,
         2.11001894675771, 6.9703330518386695, 1.6337014549371298, 1.08741495538066, 1.67070121896478,
         1.6994269033205398, 1.65725747118619, 1.8491729096025902, 1.6257995488474097, 1.5750232996581999,
         1.72698671465774, 1.57206439981323, 1.77984014425351, 2.31575691058351, 5.61337834865037, 2.24615823269181,
         1.1229548304049, 3.03390814774716, 1.5378141563832801, 1.4162406533723102, 1.5067433711284302,
         1.26685645265575, 1.3250029813553401, 1.85527475189331, 3.64578684780557, 1.5063856951393202,
         1.74448434141992, 5.07430716342761, 4.44464940832273, 1.047937903696, 2.25785184444964, 1.8637444386606299,
         3.19929337163289, 2.02126832935988, 2.70621368683483, 3.4659373830025397, 3.1205704514700097,
         1.54078118757767, 2.5527570899254, 2.0314629057641, 1.9295777081216499, 3.9997278573485695,
         2.55347665901105, 1.47673793462593, 1.17325514338054, 5.864869683973691, 1.7806770151267701,
         3.88387910648198, 9.85452342193506, 3.16045061516721, 2.47184705284744, 2.05975798261635, 1.34066487035778,
         3.3909106256891204, 1.41129354960318, 2.20049147710627, 2.1352605439493, 5.35877006739896,
         2.65928816140401, 3.24462033888913, 1.22834777762354, 2.0350560996926, 2.12885714773149, 2.22164164563295,
         2.6952148163858904, 1.7939920828527298, 1.5427793003867, 3.3839245715955495, 3.0502805177271606,
         1.9807582154820702, 2.2284539689153102, 2.84214858855092, 2.17932791983965, 2.7705300286502794,
         1.2060827331211998, 4.33124495087585, 1.09409182796094, 2.4497270359686802, 1.18993552654144,
         2.18932663505547, 2.3176341374922997, 1.2622894285321002, 1.12969326898396, 1.83426835781618,
         2.50144019554976, 2.7689720966063702, 2.23620486497658, 2.4031894030112, 2.34093124668826,
         3.52219800589029, 2.13795219259204, 1.32568769306496, 1.2245977589655, 2.5741333511207403,
         2.9067300221049703, 1.10570596206902, 2.4883663106788503, 2.22071489164147, 1.45817816685231,
         2.26906122965724, 2.17715596551935, 1.7340207205254499, 1.7929504686179298, 2.76732786440549,
         3.2086998101984197, 2.6879461911679705, 2.09314674067791, 5.34090330607976, 2.34732848055605,
         3.23483715812902, 1.45315637008695, 2.51691076858059, 1.47254567439581, 2.04051460200506, 1.98909988383849,
         2.89627161247553, 2.5208040626247, 4.4736150126779, 2.14333055000065, 1.99886312464735, 1.8069192849778601,
         1.04202477671154, 1.21053288842085, 2.66225813035902, 2.0536309743569396, 1.49290997619214,
         1.8650531761057298, 3.6726293032954103, 2.85359026539051, 1.8485042869129598, 1.16480611240655,
         2.95314775527083, 2.05034950571962, 3.95570063817523, 1.5898705898194, 3.59088658736624, 1.89974917338825,
         3.6666200758075, 5.86761876188543, 1.7761286700190702, 5.46110738040092, 4.08149602730417,
         1.4741043473863797, 1.06073924749229, 1.74526581453374, 2.28008327907346, 2.37028750714668,
         2.9195351921848705, 1.0910194711114398, 1.2728741245397, 1.14961635862346, 1.5259101131369799,
         1.25995894004324, 4.72190485859195, 1.58598632378966, 1.2404010320320802, 3.07502744557415,
         1.33029152605622, 1.7046418947011, 1.3567821318223101, 2.71250143331079, 3.33275576202734,
         3.57033604393973, 2.77570435560511, 6.059147670973691, 2.68168921283036, 1.1405046336109699,
         1.77233611704956, 1.95141164448303, 2.6210435179647202, 2.68828555919584, 1.03606090798225,
         2.2516344208258303, 2.1855243893774, 1.17676841013359, 2.8648652094383995, 2.8846249655135696,
         1.8754309441826, 3.3069903145147004, 1.21606055980756, 3.07170194171963, 2.15942160846005,
         1.80850977739929, 2.99784790382277, 3.77792681168921, 2.06827303889885, 2.33973294160813, 1.73815421193277,
         1.68411815935097, 1.45073968952827, 1.54075921001533, 1.13857187312267, 1.55688394348072, 3.31392449723275,
         2.3982475916525896, 1.45721814796414, 2.03028441884799, 1.6187115253913602, 2.13812743112701,
         1.4994563031575598, 3.79838618139183, 1.5026347672311597, 1.73174541142804, 3.0607071795854197,
         1.9258201535164, 8.19317719508426, 1.7328060349683503, 2.3734556714927098, 2.55470155525578,
         1.42596316044267, 1.0993568345057498, 1.43314848534848, 3.39485394127361, 2.7514804687122,
         1.2583469135665202, 1.57637753511257, 1.59193806281438, 2.8028094476477, 1.9909357836363102,
         3.24511595201101, 2.35408004162973, 2.8401315394334703, 3.0036749850066298, 1.4870442258756,
         2.26940895735796, 1.9646394525643, 2.38277530311363, 2.32837247530403, 3.6796217893356205,
         1.50911897959249, 1.17328232713821, 1.86419131481876, 2.5088663508072298, 1.4392242155658301,
         1.5373602412780702, 2.3053174000395398, 2.727007234181, 2.62661090044982, 1.2244089185139901,
         2.1136550539783703, 2.16472209843597, 6.04506989189589, 1.5371663964955802, 1.60856498200689,
         1.7288541140842801, 1.08474131330987, 2.3922415348039703, 1.48164574390951, 1.92699512108602,
         3.7080776694464, 1.40764751750607, 1.62868906713295, 1.0210667437749, 1.38235978776831, 2.86996924717528,
         1.9454753219938998, 1.97747646361514, 1.829313599696, 1.5767432208136, 2.35521314862812, 2.5906886532104,
         2.65956766407226, 1.9992211127691102, 2.62092291705681, 4.51657586831121, 1.01015846190497,
         1.2362648723718301, 1.8197917575581002, 1.07355503084699, 2.16874067221714, 1.97964342930033,
         1.2845552778700902, 1.81162765391125, 1.03873674544613, 1.56255389842343, 1.9489329439646101,
         1.7617337050607902, 1.8026897817068899, 1.6834093580130902, 2.6129668704989197, 1.1892346586395601,
         2.9520905532909, 3.73126947873821, 5.8954264295756, 4.14833750294603, 2.73574547175212, 3.2876369288930296,
         4.18159688333239, 2.51976180053923, 1.35528029714452, 1.5657777541126898, 1.6422387896212,
         1.7581681121944197, 2.08154446678133, 1.67928005937435, 2.3586346279279, 1.68024628057982,
         2.14801522006139, 2.90277331244452, 1.8063645179568797, 3.6518832750601202, 3.17248175412747,
         1.82120232400004, 2.05781432040546, 1.7532775518140302, 1.30523974695928, 1.4639444189601898,
         1.2469175811731799, 1.3284375205713501, 1.58372922387582, 1.37804911972972, 1.2922240681956298,
         1.08699419481181, 2.43321834178832, 1.7603279056593502, 1.87462049531349, 1.85181402973792,
         1.41947980396161, 2.01952516056326, 2.23966090713521, 3.71856952507671, 2.7983489341186, 4.889765708914211,
         2.8348528620726503, 1.40191681127155, 2.3727757439459602, 2.19561569267477, 2.9816393023582797,
         2.3331980862056803, 1.6136761686576, 2.24560460053665, 1.8877605013184802, 2.55708140544183,
         1.5741308080878897, 1.32659232240102, 2.61906518074603, 3.5688339121461294, 3.37331945776233,
         1.79865557352399, 1.89313542674672, 2.25161994312719, 1.76239682447871, 1.78654674149562, 1.45843424107237,
         3.2190276975239303, 4.44753326210326, 1.1917771226703, 2.38405398877583, 1.29923841079292,
         1.94614146452858, 1.7847607102283898, 2.90364836452148, 2.1488443370102, 1.54792982072047,
         1.87743287987306, 1.0356499349613901, 1.16851078434637, 1.92097416621373, 3.4459266632376004,
         2.5161859385422596, 1.05935379886683, 2.07418037576453, 2.4068874966357203, 4.22597155413014,
         2.7804570691141803, 2.22975388742368, 7.8986913042947196, 5.43291883505858, 1.1338287054778502,
         2.38497732300614, 1.0521943886284102, 1.6306118525120499, 1.22996887707203, 1.28395719223457,
         1.5259848897498998, 3.1373021652177595, 1.82487346420733, 2.20626593266485, 1.22725041830491,
         1.39028151352858, 1.9686297605921999, 2.58795567746297, 1.24128850502457, 1.80100989432353,
         1.8642000586649499, 1.2922228496331798, 1.39987390036597, 1.65209471276528, 2.06758480184158,
         1.5293523596033303, 1.4001581106685501]
    vs = np.array(v).reshape(3217, 1)
    vs = vs[nodes_index,:]
    v_new = [v[i] for i in range(3217) if i in nodes_index]
    vs=torch.tensor(vs)
    w = torch.tensor(np.array(nx.adjacency_matrix(Gs).todense()), dtype=torch.float64, requires_grad=True)
    optimizer = torch.optim.SGD(params=[w,], lr=0.01)
    w = torch.load("w.pt")
    # # 优化
    for i in range(5000):
        loss_f = nn.MSELoss()
        loss = loss_f(torch.mm(torch.mul(w,w0).T,vs), vs)
        # print(loss)
        if loss<1e-14:
            break
        optimizer.zero_grad()  # 让w的偏导数置零
        loss.backward()  # 反向传播，计算w的偏导数
        optimizer.step()  # 根据上述两个公式，计算一个v，然后作用到w
    tmp=nx.Graph().to_directed()
    tmp.add_nodes_from(nodes1)
    for i in range(3164):
        # print(i)
        for j in range(3164):
            if w[i][j]!=0:
                tmp.add_edge(nodes1[i], nodes1[j], weight=w[i][j])
    score=(torch.mul(w.sum(axis=1), torch.tensor(v_new)).detach()).numpy().tolist()
    # score = torch.load("score.pt")
    score_start={}
    for i in range(3164):
        score_start[nodes1[i]]=score[i]
    print(score_start)
    # torch.save(w,"w.pt")
    # torch.save(score,"score.pt")
    # print("--------")
    all_hits=nx.hits(tmp,nstart=score_start,max_iter=500)[1]
    # for a in all_hits:
    #     print(all_hits[a])
    hits = [(v_new, all_hits[v_new]) for v_new in all_hits]
    sorted_hits = sorted(hits, key=lambda x: (x[1], x[0]), reverse=True)
    action_choosed = [x[0] for x in sorted_hits]
    torch.save(action_choosed, "genhit.pt")
    return action_choosed


#计算precision recall
def compute_top_k_precision_recall(choosed_node, type,k,n,num_gold_standard,num_rna):
    lnc, mi, m = change_name(choosed_node)
    gold_lnc=pd.read_excel('../data/RNA_disease/gold_lnc.xlsx', header=None)[0].tolist()
    gold_mi=pd.read_excel('../data/RNA_disease/gold_mi.xlsx', header=None)[0].tolist()
    gold_m=pd.read_excel('../data/RNA_disease/gold_m.xlsx', header=None)[0].tolist()

    top_k_precision = list()
    top_k_recall = list()
    top_k_f1score = list()
    top_k_pvalue=list()
    for i in range(n-1, k,n):
        if type=='lncrna':
            top_k_genes = pd.Series(lnc[:(i + 1)]).isin(gold_lnc).sum()
        elif type=='mirna':
            top_k_genes = pd.Series(mi[:(i + 1)]).isin(gold_mi).sum()
        else:
            top_k_genes = pd.Series(m[:(i + 1)]).isin(gold_m).sum()
        top_k_precision.append(top_k_genes/(i + 1))
        top_k_recall.append(top_k_genes/num_gold_standard)
        top_k_f1score.append(2*(top_k_genes/(i + 1))*(top_k_genes/num_gold_standard)/(top_k_genes/(i + 1)+top_k_genes/num_gold_standard))
        top_k_pvalue.append(stats.hypergeom.sf(k=top_k_genes-1, M=num_rna, n=num_gold_standard, N=i+1))#M个里有n个，问取出N个里有k+1个的pvalue
    print("--------------precision--------------")
    for i in top_k_precision:
        print(i)
    print("--------------recall--------------")
    for i in top_k_recall:
        print(i)
    print("--------------f1score--------------")
    for i in top_k_f1score:
        print(i)
    print("--------------pvalue--------------")
    for i in top_k_pvalue:
        print(i)

    return top_k_precision, top_k_recall,top_k_f1score,top_k_pvalue


#提取子网，并且可视化展示子网图
def subgraph(subnodes):
    env = mvc_env.MVC_env()
    init_graph = load_random_hetero_graph(args['path'], Specified_quantity={'lncrna': 1500, 'mirna': 168, 'mrna': 2519})
    g, s, num_rna = env.reset(init_graph)
    G = dgl.to_homogeneous(init_graph).to_networkx().to_undirected().subgraph(subnodes)
    color_dict={'lncrna':'blue','mirna':'yellow','mrna':'red'}
    for i in G.nodes():
        G.nodes[i]['color']=color_dict[num_rna[i][0]]

    node_color = [G.nodes[v]['color'] for v in G]  # 获得G中各个节点的设置值；

    nx.draw(G, with_labels=True, node_color=node_color, pos=nx.shell_layout(G))
    plt.savefig('subgraph.jpg')
    plt.show()


def pvalue():
    df=pd.read_csv('../data/RNA_disease/lncrna.csv')
    a=df['RWO'].tolist()
    b = sorted(a,reverse=True)

    d1=df.loc[df['disease_flag']==1]['RWO']
    d0=df.loc[df['disease_flag']==0]['RWO']
    #d1=[b.index(i) for i in d1]
    #d0=[b.index(i) for i in d0]
    #print(levene(d1, d0))
    #print(ttest_ind(d1, d0))#T检验
    print(sw.ztest(d1,d0,value=0))#Z检验


if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    # 网络参数
    parser.add_argument('--in_size', type=int, default=1)
    parser.add_argument('--out_size', type=int, default=1)
    parser.add_argument('--feat_dim', type=int, default=32)
    parser.add_argument('--num_bases', type=int, default=5)
    parser.add_argument('--num_hidden_layers', type=int, default=2)  # 隐藏层数
    parser.add_argument('--all_relations', type=list,default=['lnc_lnc', 'lnc_mi', 'm_lnc', 'mi_lnc', 'mi_m', 'mi_mi', 'lnc_m', 'm_m','m_mi'])

    # DQN参数
    parser.add_argument('--memory_capacity', type=int, default=100000)  # 记忆库容量
    parser.add_argument('--epsilon', type=float, default=1.0)#1.0按q分数选  -1.0百分百随机
    parser.add_argument('--target_replace_iter', type=int, default=100)
    parser.add_argument('--batch_size', type=int, default=128)
    parser.add_argument('--gamma', type=float, default=0.99)  # 衰减因子，越低对以往的经验的关注越小
    parser.add_argument('--maxiter', type=int, default=5000)
    # parser.add_argument('--path', type=str, default='../data/random_network')
    parser.add_argument('--path', type=str, default='../data/PAAD_network')
    parser.add_argument('--param_path', type=str, default='./save_model/9999_-13.pth')
    parser.add_argument('--learning_rate', type=float, default=0.0001)
    parser.add_argument('--step_size', type=int, default=10000)
    parser.add_argument('--learning_rate_gamma', type=float, default=1.0)

    args = parser.parse_args().__dict__
    args['device'] = 'cuda:0' if torch.cuda.is_available() else 'cpu'

    seed = 1000
    torch.manual_seed(seed)
    np.random.seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)  # 为了禁止hash随机化，使得实验可复现
    if torch.cuda.is_available():
        torch.cuda.manual_seed(seed)
        torch.cuda.manual_seed_all(seed)  # if you are using multi-GPU.
    torch.backends.cudnn.benchmark = True
    torch.backends.cudnn.deterministic = True

    torch.cuda.set_device(0)

    # rnas_chooesed()

    #action_choosed=main('./save_model/2499_-82.pth',Specified_quantity={'lncrna':1500,'mirna':168,'mrna':2519})#Specified_quantity={'lncrna':1500,'mirna':168,'mrna':2519}
    #action_choosed=cc_sort()
    # action_choosed=degree_sort()
    # action_choosed=bc_sort()
    # action_choosed=model_sort()
    action_choosed=nibna_sort()
    action_choosed=pagerank_sort()
    # action_choosed=rwr_sort()
    # action_choosed = hit_sort()
    action_choosed=genehit_sort()
    action_choosed=HWVoteRank_sort()
    # action_choosed=RWO_sort()
    # action_choosed=imaxdriver_sort()

    # action_choosed = torch.load("imax10.pt")
    # nodes1 = torch.load("degree_nodes.pt")
    # print(len(nodes1))
    # action_choosed = [int(node) for node in action_choosed1 if node in nodes1]
    # action_choosed = torch.load("delete_nodes.pt")

    # action_choosed1 = torch.load("bigchooesed-zfs6-N50-300.pt")
    # # action_choosed1 = torch.load("bigchooesed-N300-100.pt")
    # action_choosed = [int(node) for node in action_choosed1]
    # print(len(action_choosed),end=" ")

    # action_choosed = torch.load("bigchooesed-N30-120.pt")
    # action_choosed = torch.load("N50_pagerank_100.pt")
    # action_choosed = torch.load("N300_pagerank_20.pt")
    # action_choosed = torch.load("N50_pagerank_100.pt")
    # action_choosed = torch.load("N50_pagerank_zfs6_100.pt")
    # action_choosed = torch.load("N50_all_300.pt")
    # action_choosed = torch.load("N250_all_20.pt")
    # action_choosed = torch.load("N300_all_100.pt")
    # action_choosed = torch.load("N300_all_20.pt")
    # action_choosed = torch.load("N300_pagerank_20.pt")
    # action_choosed = torch.load("N300_all_100.pt")
    # action_choosed = torch.load("sorted_all_60.pt")
    # action_choosed = torch.load("N50_pagerank_100.pt")
    # action_choosed = torch.load("N250_pagerank_60.pt")
    # action_choosed = torch.load("N300_zfs6_100.pt")
    # action_choosed = torch.load("N50_pagerank_100.pt")
    # action_choosed = torch.load("N250_all_20.pt")
    # action_choosed = torch.load("N300_1_20.pt")
    # action_choosed = torch.load("N300_22_20.pt")
    # action_choosed = torch.load("N300_2_20.pt")
    # action_choosed = torch.load("N300_3_20.pt")
    # action_choosed = torch.load("N300_44_20.pt")
    # action_choosed = torch.load("N300_10_20.pt")
    # action_choosed = torch.load("N300_6_20.pt")
    # action_choosed = torch.load("N300_7_20.pt")
    # action_choosed = torch.load("N300_1_20.pt")
    # action_choosed = torch.load("N300_22_20.pt")
    # action_choosed = torch.load("N300_3_20.pt")
    # action_choosed = torch.load("N300_4_20.pt")
    # action_choosed = torch.load("N300_5_20.pt")
    # action_choosed = torch.load("N300_6_20.pt")
    # action_choosed = torch.load("N300_6_60.pt")
    # action_choosed = torch.load("N300_7_20.pt")
    # action_choosed = torch.load("N300_8_20.pt")
    # action_choosed = torch.load("N300_9_20.pt")
    # action_choosed = torch.load("N300_10_20.pt")
    # action_choosed = torch.load("N300_4_20.pt")
    # action_choosed = torch.load("N300_55_20.pt")
    # action_choosed = torch.load("N300_44_20.pt")
    # action_choosed = torch.load("N300_444444_20.pt")
    # action_choosed = torch.load("N300_5555_20.pt")
    # action_choosed = torch.load("N300_55555_20.pt")
    # action_choosed = torch.load("N300_55_20.pt")
    # action_choosed = torch.load("N300_old_2_20.pt")
    # action_choosed = torch.load("N400_old_1_20.pt")
    # action_choosed = torch.load("N250_1_100_new.pt")
    # action_choosed = torch.load("N300_old_3_20.pt")
    # action_choosed = torch.load("N300_555_20.pt")
    # action_choosed = torch.load("N300_1010_20.pt")
    # action_choosed = torch.load("N300_11_20.pt")
    # action_choosed = torch.load("N100_all_60_noover.pt")
    # model_id = range(20, 140, 20)
    # for id in model_id:
    # action_choosed = torch.load("bigchooesed-N30-"+str(id)+".pt")
    # action_choosed = nibna_sort()
    #print(len(action_choosed))

    '''
    后测试部分
    '''
    # action_choosed = torch.load("N50_pagerank_zfs6_100.pt")
    # action_choosed = torch.load("N50_all_300.pt")
    # action_choosed = torch.load("N300_pagerank_20.pt")
    # action_choosed = torch.load("N150_all_100.pt")
    # action_choosed = torch.load("N250_pagerank_100.pt")
    # action_choosed1 = torch.load("bigchooesed-zfs6-N50-300.pt")
    # action_choosed1 = torch.load("bigchooesed-zfs6-N50-600.pt")
    # action_choosed1 = torch.load("bigchooesed-zfs6-N50-750.pt")
    # action_choosed1 = torch.load("bigchooesed-zfs6-N50-850.pt")
    # action_choosed1 = torch.load("bigchooesed-zfs6-N50-1000.pt")
    # action_choosed1 = torch.load("bigchooesed-pagerank-N50-300.pt")
    # action_choosed1 = torch.load("bigchooesed-pagerank-N50-450.pt")
    # action_choosed1 = torch.load("bigchooesed-pagerank-N50-700.pt")
    # action_choosed1 = torch.load("bigchooesed-N50-120.pt")
    # action_choosed1 = torch.load("bigchooesed-N150-100.pt")
    # action_choosed1 = torch.load("bigchooesed-N200-140.pt")
    # action_choosed1 = torch.load("bigchooesed-N250-100.pt")
    # action_choosed1 = torch.load("bigchooesed-N300-100.pt")
    # action_choosed1 = torch.load("bigchooesed-N300-pagerank-40.pt")
    # action_choosed1 = torch.load("bigchooesed-pagerank-zfs6-N50-300.pt")
    # action_choosed1 = torch.load("bigchooesed-pagerank-zfs6-N50-460.pt")
    # action_choosed1 = torch.load("bigchooesed-N300-pagerank-40.pt")
    # action_choosed1 = torch.load("bigchooesed-N250-100.pt")
    # action_choosed1 = torch.load("bigchooesed-zfs6-N50-300.pt")
    # action_choosed1 = torch.load("bigchooesed-pagerank-zfs6-N50-100.pt")
    # action_choosed1 = torch.load("bigchooesed-N300-100.pt") #N300 zfs6
    # action_choosed1 = torch.load("bigchooesed-N300-4-20.pt")
    # action_choosed1 = torch.load("bigchooesed-N300-55-20.pt")
    # action_choosed = [int(node) for node in action_choosed1]
    # print(len(action_choosed),end=" ")


    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # print(action_choosed)
    #
    lnc_choosed=[i for i in action_choosed if i>=0 and i<1500]
    mi_choosed=[i for i in action_choosed if i>=1500 and i<1668]
    m_choosed=[i for i in action_choosed if i>=1668]
    print(len(action_choosed),end=" ")
    print(len(lnc_choosed),end=" ")
    print(len(mi_choosed),end=" ")
    print(len(m_choosed))

    # degree0_nodes_ispaad = torch.load("degree0_nodes_ispaad.pt")
    # degree0_nodes_ispaad = torch.load("degree0_nodes_ispaad_new.pt")
    # degree0_nodes_ispaad = torch.load("all_nodes_ispaad_new.pt")
    degree0_nodes_ispaad = torch.load("all_nodes_ispaad_old.pt")
    # degree0_nodes_ispaad = torch.load("node_name_dic_new_new.pt")
    res = []
    count = 0
    for ind in range(0,1000,50):
        count_t = 0
        for node in action_choosed[ind:ind+50]:
            if degree0_nodes_ispaad[node]:
                count_t+=1
        count += count_t
        res.append(count)
    print(res)

    #计算可控节点集有多少与paad有关
    len_all = 0
    lnc_all = 0
    mi_all = 0
    m_all = 0
    for node in action_choosed:
        if degree0_nodes_ispaad[node]:
            len_all+=1
    for node in lnc_choosed:
        if degree0_nodes_ispaad[node]:
            lnc_all+=1
    for node in mi_choosed:
        if degree0_nodes_ispaad[node]:
            mi_all+=1
    for node in m_choosed:
        if degree0_nodes_ispaad[node]:
            m_all+=1
    print(len_all,lnc_all,mi_all,m_all)
    l_nall = []
    mi_nall = []
    m_nall = []
    res = 0
    for i in range(0,200,50):
        count = 0
        for lnc in lnc_choosed[i:i+50]:
            if degree0_nodes_ispaad[lnc]:
                count+=1
        res+=count
        l_nall.append(res)
    res = 0
    for i in range(0,50, 10):
        count = 0
        for mi in mi_choosed[i:i+10]:
            if degree0_nodes_ispaad[mi]:
                count+=1
        res+=count
        mi_nall.append(res)
    res = 0
    for i in range(0, 700, 100):
        count = 0
        for m in m_choosed[i:i + 100]:
            if degree0_nodes_ispaad[m]:
                count += 1
        res += count
        m_nall.append(res)


    print(l_nall)
    print(mi_nall)
    print(m_nall)
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # res = {}
    # node_name_dic = {}
    # lnc,mi,m=change_name(lnc_choosed)
    # lnc_paad = lncrna(lnc)
    # for ind,l in enumerate(lnc):
    #     if l in lnc_paad:
    #         node_name_dic[lnc_choosed[ind]] = 1
    #     else:
    #         node_name_dic[lnc_choosed[ind]] = 0
    # print(len(node_name_dic.keys()))
    #
    # lnc, mi, m = change_name(mi_choosed)
    # mi_paad = mirna(mi)
    #
    # for ind,ii in enumerate(mi):
    #     if ii in mi_paad:
    #         node_name_dic[mi_choosed[ind]] = 1
    #     else:
    #         node_name_dic[mi_choosed[ind]] = 0
    # print(len(node_name_dic.keys()))
    #
    # lnc, mi, m = change_name(m_choosed)
    # m_paad = mrna(m)
    #
    # for ind,ii in enumerate(m):
    #     if ii in m_paad:
    #         node_name_dic[m_choosed[ind]] = 1
    #     else:
    #         node_name_dic[m_choosed[ind]] = 0
    # print(len(node_name_dic.keys()))
    # torch.save(node_name_dic,"node_name_dic_new_new.pt")
    # print(l_n)
    # print(mi_n)
    # print(m_n)
    # print("开始")
    # for i in action_choosed:
    #     if i >= 0 and i < 1500:
    #         if node_name_dic[i] in l_n:
    #             res[i] = 1
    #         else:
    #             res[i] = 0
    #     elif i>=1500 and i<1668:
    #         if node_name_dic[i] in mi_n:
    #             res[i] = 1
    #         else:
    #             res[i] = 0
    #     else:
    #         if node_name_dic[i] in m_n:
    #             res[i] = 1
    #         else:
    #             res[i] = 0
    # print(res)
    # torch.save(res, "all_nodes_ispaad_old.pt")
    # # l_nall = []
    # # mi_nall = []
    # # m_nall = []
    # # lnc,mi,m=change_name(lnc_choosed[:400])
    # # l_n = lncrna(lnc)
    # # l_nall.append(l_n)
    # # lnc, mi, m = change_name(mi_choosed[:60])
    # # mi_n = mirna(mi)
    # # mi_nall.append(mi_n)
    # # lnc, mi, m = change_name(m_choosed[:700])
    # # m_n = mrna(m)
    # # m_nall.append(m_n)
    #




        # pre,recll,_,_ = compute_top_k_precision_recall(lnc_choosed, 'lncrna',200,4,25,690)
        # torch.save(pre,"./save_model6/modelpre2.pth")
        # torch.save(recll,"./save_model6/modelrecll2.pth")

        # print(compute_top_k_precision_recall(mi_choosed, 'mirna',50,1,131,168))
        # print(compute_top_k_precision_recall(m_choosed, 'mrna',700,10,733,2359))
        # pvalue()

        # 数据集版本弄明白！